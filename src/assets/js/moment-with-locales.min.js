(function (e) {
  function t(e, t, a) {
    switch (arguments.length) {
      case 2:
        return null != e ? e : t;
      case 3:
        return null != e ? e : null != t ? t : a;
      default:
        throw new Error('Implement me');
    }
  }
  function a(e, t) {
    return bt.call(e, t);
  }
  function n() {
    return {
      empty: !1,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: !1,
      invalidMonth: null,
      invalidFormat: !1,
      userInvalidated: !1,
      iso: !1,
    };
  }
  function s(e) {
    Tt.suppressDeprecationWarnings === !1 &&
      'undefined' != typeof console &&
      console.warn &&
      console.warn('Deprecation warning: ' + e);
  }
  function r(e, t) {
    var a = !0;
    return c(function () {
      return a && (s(e), (a = !1)), t.apply(this, arguments);
    }, t);
  }
  function _(e, t) {
    fa[e] || (s(t), (fa[e] = !0));
  }
  function d(e, t) {
    return function (a) {
      return Y(e.call(this, a), t);
    };
  }
  function i(e, t) {
    return function (a) {
      return this.localeData().ordinal(e.call(this, a), t);
    };
  }
  function o(e, t) {
    var a,
      n,
      s = 12 * (t.year() - e.year()) + (t.month() - e.month()),
      r = e.clone().add(s, 'months');
    return (
      0 > t - r
        ? ((a = e.clone().add(s - 1, 'months')), (n = (t - r) / (r - a)))
        : ((a = e.clone().add(s + 1, 'months')), (n = (t - r) / (a - r))),
      -(s + n)
    );
  }
  function u(e, t, a) {
    var n;
    return null == a
      ? t
      : null != e.meridiemHour
        ? e.meridiemHour(t, a)
        : null != e.isPM
          ? ((n = e.isPM(a)),
            n && 12 > t && (t += 12),
            n || 12 !== t || (t = 0),
            t)
          : t;
  }
  function l() {}
  function m(e, t) {
    t !== !1 && P(e),
      L(this, e),
      (this._d = new Date(+e._d)),
      pa === !1 && ((pa = !0), Tt.updateOffset(this), (pa = !1));
  }
  function M(e) {
    var t = v(e),
      a = t.year || 0,
      n = t.quarter || 0,
      s = t.month || 0,
      r = t.week || 0,
      _ = t.day || 0,
      d = t.hour || 0,
      i = t.minute || 0,
      o = t.second || 0,
      u = t.millisecond || 0;
    (this._milliseconds = +u + 1e3 * o + 6e4 * i + 36e5 * d),
      (this._days = +_ + 7 * r),
      (this._months = +s + 3 * n + 12 * a),
      (this._data = {}),
      (this._locale = Tt.localeData()),
      this._bubble();
  }
  function c(e, t) {
    for (var n in t) a(t, n) && (e[n] = t[n]);
    return (
      a(t, 'toString') && (e.toString = t.toString),
      a(t, 'valueOf') && (e.valueOf = t.valueOf),
      e
    );
  }
  function L(e, t) {
    var a, n, s;
    if (
      ('undefined' != typeof t._isAMomentObject &&
        (e._isAMomentObject = t._isAMomentObject),
      'undefined' != typeof t._i && (e._i = t._i),
      'undefined' != typeof t._f && (e._f = t._f),
      'undefined' != typeof t._l && (e._l = t._l),
      'undefined' != typeof t._strict && (e._strict = t._strict),
      'undefined' != typeof t._tzm && (e._tzm = t._tzm),
      'undefined' != typeof t._isUTC && (e._isUTC = t._isUTC),
      'undefined' != typeof t._offset && (e._offset = t._offset),
      'undefined' != typeof t._pf && (e._pf = t._pf),
      'undefined' != typeof t._locale && (e._locale = t._locale),
      Et.length > 0)
    )
      for (a in Et)
        (n = Et[a]), (s = t[n]), 'undefined' != typeof s && (e[n] = s);
    return e;
  }
  function h(e) {
    return 0 > e ? Math.ceil(e) : Math.floor(e);
  }
  function Y(e, t, a) {
    for (var n = '' + Math.abs(e), s = e >= 0; n.length < t; ) n = '0' + n;
    return (s ? (a ? '+' : '') : '-') + n;
  }
  function f(e, t) {
    var a = { milliseconds: 0, months: 0 };
    return (
      (a.months = t.month() - e.month() + 12 * (t.year() - e.year())),
      e.clone().add(a.months, 'M').isAfter(t) && --a.months,
      (a.milliseconds = +t - +e.clone().add(a.months, 'M')),
      a
    );
  }
  function y(e, t) {
    var a;
    return (
      (t = O(t, e)),
      e.isBefore(t)
        ? (a = f(e, t))
        : ((a = f(t, e)),
          (a.milliseconds = -a.milliseconds),
          (a.months = -a.months)),
      a
    );
  }
  function p(e, t) {
    return function (a, n) {
      var s, r;
      return (
        null === n ||
          isNaN(+n) ||
          (_(
            t,
            'moment().' +
              t +
              '(period, number) is deprecated. Please use moment().' +
              t +
              '(number, period).'
          ),
          (r = a),
          (a = n),
          (n = r)),
        (a = 'string' == typeof a ? +a : a),
        (s = Tt.duration(a, n)),
        T(this, s, e),
        this
      );
    };
  }
  function T(e, t, a, n) {
    var s = t._milliseconds,
      r = t._days,
      _ = t._months;
    (n = null == n ? !0 : n),
      s && e._d.setTime(+e._d + s * a),
      r && Lt(e, 'Date', ct(e, 'Date') + r * a),
      _ && Mt(e, ct(e, 'Month') + _ * a),
      n && Tt.updateOffset(e, r || _);
  }
  function D(e) {
    return '[object Array]' === Object.prototype.toString.call(e);
  }
  function k(e) {
    return (
      '[object Date]' === Object.prototype.toString.call(e) || e instanceof Date
    );
  }
  function g(e, t, a) {
    var n,
      s = Math.min(e.length, t.length),
      r = Math.abs(e.length - t.length),
      _ = 0;
    for (n = 0; s > n; n++)
      ((a && e[n] !== t[n]) || (!a && S(e[n]) !== S(t[n]))) && _++;
    return _ + r;
  }
  function w(e) {
    if (e) {
      var t = e.toLowerCase().replace(/(.)s$/, '$1');
      e = la[e] || ma[t] || t;
    }
    return e;
  }
  function v(e) {
    var t,
      n,
      s = {};
    for (n in e) a(e, n) && ((t = w(n)), t && (s[t] = e[n]));
    return s;
  }
  function b(t) {
    var a, n;
    if (0 === t.indexOf('week')) (a = 7), (n = 'day');
    else {
      if (0 !== t.indexOf('month')) return;
      (a = 12), (n = 'month');
    }
    Tt[t] = function (s, r) {
      var _,
        d,
        i = Tt._locale[t],
        o = [];
      if (
        ('number' == typeof s && ((r = s), (s = e)),
        (d = function (e) {
          var t = Tt().utc().set(n, e);
          return i.call(Tt._locale, t, s || '');
        }),
        null != r)
      )
        return d(r);
      for (_ = 0; a > _; _++) o.push(d(_));
      return o;
    };
  }
  function S(e) {
    var t = +e,
      a = 0;
    return (
      0 !== t && isFinite(t) && (a = t >= 0 ? Math.floor(t) : Math.ceil(t)), a
    );
  }
  function j(e, t) {
    return new Date(Date.UTC(e, t + 1, 0)).getUTCDate();
  }
  function W(e, t, a) {
    return ot(Tt([e, 11, 31 + t - a]), t, a).week;
  }
  function x(e) {
    return H(e) ? 366 : 365;
  }
  function H(e) {
    return (e % 4 === 0 && e % 100 !== 0) || e % 400 === 0;
  }
  function P(e) {
    var t;
    e._a &&
      -2 === e._pf.overflow &&
      ((t =
        e._a[jt] < 0 || e._a[jt] > 11
          ? jt
          : e._a[Wt] < 1 || e._a[Wt] > j(e._a[St], e._a[jt])
            ? Wt
            : e._a[xt] < 0 ||
                e._a[xt] > 24 ||
                (24 === e._a[xt] &&
                  (0 !== e._a[Ht] || 0 !== e._a[Pt] || 0 !== e._a[Ft]))
              ? xt
              : e._a[Ht] < 0 || e._a[Ht] > 59
                ? Ht
                : e._a[Pt] < 0 || e._a[Pt] > 59
                  ? Pt
                  : e._a[Ft] < 0 || e._a[Ft] > 999
                    ? Ft
                    : -1),
      e._pf._overflowDayOfYear && (St > t || t > Wt) && (t = Wt),
      (e._pf.overflow = t));
  }
  function F(t) {
    return (
      null == t._isValid &&
        ((t._isValid =
          !isNaN(t._d.getTime()) &&
          t._pf.overflow < 0 &&
          !t._pf.empty &&
          !t._pf.invalidMonth &&
          !t._pf.nullInput &&
          !t._pf.invalidFormat &&
          !t._pf.userInvalidated),
        t._strict &&
          (t._isValid =
            t._isValid &&
            0 === t._pf.charsLeftOver &&
            0 === t._pf.unusedTokens.length &&
            t._pf.bigHour === e)),
      t._isValid
    );
  }
  function z(e) {
    return e ? e.toLowerCase().replace('_', '-') : e;
  }
  function E(e) {
    for (var t, a, n, s, r = 0; r < e.length; ) {
      for (
        s = z(e[r]).split('-'),
          t = s.length,
          a = z(e[r + 1]),
          a = a ? a.split('-') : null;
        t > 0;

      ) {
        if ((n = A(s.slice(0, t).join('-')))) return n;
        if (a && a.length >= t && g(s, a, !0) >= t - 1) break;
        t--;
      }
      r++;
    }
    return null;
  }
  function A(e) {
    var t = null;
    if (!zt[e] && At)
      try {
        (t = Tt.locale()), require('./locale/' + e), Tt.locale(t);
      } catch (a) {}
    return zt[e];
  }
  function O(e, t) {
    var a, n;
    return t._isUTC
      ? ((a = t.clone()),
        (n = (Tt.isMoment(e) || k(e) ? +e : +Tt(e)) - +a),
        a._d.setTime(+a._d + n),
        Tt.updateOffset(a, !1),
        a)
      : Tt(e).local();
  }
  function J(e) {
    return e.match(/\[[\s\S]/)
      ? e.replace(/^\[|\]$/g, '')
      : e.replace(/\\/g, '');
  }
  function C(e) {
    var t,
      a,
      n = e.match(Gt);
    for (t = 0, a = n.length; a > t; t++) n[t] = Ya[n[t]] ? Ya[n[t]] : J(n[t]);
    return function (s) {
      var r = '';
      for (t = 0; a > t; t++)
        r += n[t] instanceof Function ? n[t].call(s, e) : n[t];
      return r;
    };
  }
  function G(e, t) {
    return e.isValid()
      ? ((t = U(t, e.localeData())), Ma[t] || (Ma[t] = C(t)), Ma[t](e))
      : e.localeData().invalidDate();
  }
  function U(e, t) {
    function a(e) {
      return t.longDateFormat(e) || e;
    }
    var n = 5;
    for (Ut.lastIndex = 0; n >= 0 && Ut.test(e); )
      (e = e.replace(Ut, a)), (Ut.lastIndex = 0), (n -= 1);
    return e;
  }
  function I(e, t) {
    var a,
      n = t._strict;
    switch (e) {
      case 'Q':
        return Qt;
      case 'DDDD':
        return ta;
      case 'YYYY':
      case 'GGGG':
      case 'gggg':
        return n ? aa : Vt;
      case 'Y':
      case 'G':
      case 'g':
        return sa;
      case 'YYYYYY':
      case 'YYYYY':
      case 'GGGGG':
      case 'ggggg':
        return n ? na : qt;
      case 'S':
        if (n) return Qt;
      case 'SS':
        if (n) return ea;
      case 'SSS':
        if (n) return ta;
      case 'DDD':
        return Nt;
      case 'MMM':
      case 'MMMM':
      case 'dd':
      case 'ddd':
      case 'dddd':
        return Zt;
      case 'a':
      case 'A':
        return t._locale._meridiemParse;
      case 'x':
        return Bt;
      case 'X':
        return Xt;
      case 'Z':
      case 'ZZ':
        return Rt;
      case 'T':
        return Kt;
      case 'SSSS':
        return $t;
      case 'MM':
      case 'DD':
      case 'YY':
      case 'GG':
      case 'gg':
      case 'HH':
      case 'hh':
      case 'mm':
      case 'ss':
      case 'ww':
      case 'WW':
        return n ? ea : It;
      case 'M':
      case 'D':
      case 'd':
      case 'H':
      case 'h':
      case 'm':
      case 's':
      case 'w':
      case 'W':
      case 'e':
      case 'E':
        return It;
      case 'Do':
        return n ? t._locale._ordinalParse : t._locale._ordinalParseLenient;
      default:
        return (a = new RegExp(X(B(e.replace('\\', '')), 'i')));
    }
  }
  function N(e) {
    e = e || '';
    var t = e.match(Rt) || [],
      a = t[t.length - 1] || [],
      n = (a + '').match(oa) || ['-', 0, 0],
      s = +(60 * n[1]) + S(n[2]);
    return '+' === n[0] ? s : -s;
  }
  function V(e, t, a) {
    var n,
      s = a._a;
    switch (e) {
      case 'Q':
        null != t && (s[jt] = 3 * (S(t) - 1));
        break;
      case 'M':
      case 'MM':
        null != t && (s[jt] = S(t) - 1);
        break;
      case 'MMM':
      case 'MMMM':
        (n = a._locale.monthsParse(t, e, a._strict)),
          null != n ? (s[jt] = n) : (a._pf.invalidMonth = t);
        break;
      case 'D':
      case 'DD':
        null != t && (s[Wt] = S(t));
        break;
      case 'Do':
        null != t && (s[Wt] = S(parseInt(t.match(/\d{1,2}/)[0], 10)));
        break;
      case 'DDD':
      case 'DDDD':
        null != t && (a._dayOfYear = S(t));
        break;
      case 'YY':
        s[St] = Tt.parseTwoDigitYear(t);
        break;
      case 'YYYY':
      case 'YYYYY':
      case 'YYYYYY':
        s[St] = S(t);
        break;
      case 'a':
      case 'A':
        a._meridiem = t;
        break;
      case 'h':
      case 'hh':
        a._pf.bigHour = !0;
      case 'H':
      case 'HH':
        s[xt] = S(t);
        break;
      case 'm':
      case 'mm':
        s[Ht] = S(t);
        break;
      case 's':
      case 'ss':
        s[Pt] = S(t);
        break;
      case 'S':
      case 'SS':
      case 'SSS':
      case 'SSSS':
        s[Ft] = S(1e3 * ('0.' + t));
        break;
      case 'x':
        a._d = new Date(S(t));
        break;
      case 'X':
        a._d = new Date(1e3 * parseFloat(t));
        break;
      case 'Z':
      case 'ZZ':
        (a._useUTC = !0), (a._tzm = N(t));
        break;
      case 'dd':
      case 'ddd':
      case 'dddd':
        (n = a._locale.weekdaysParse(t)),
          null != n
            ? ((a._w = a._w || {}), (a._w.d = n))
            : (a._pf.invalidWeekday = t);
        break;
      case 'w':
      case 'ww':
      case 'W':
      case 'WW':
      case 'd':
      case 'e':
      case 'E':
        e = e.substr(0, 1);
      case 'gggg':
      case 'GGGG':
      case 'GGGGG':
        (e = e.substr(0, 2)), t && ((a._w = a._w || {}), (a._w[e] = S(t)));
        break;
      case 'gg':
      case 'GG':
        (a._w = a._w || {}), (a._w[e] = Tt.parseTwoDigitYear(t));
    }
  }
  function q(e) {
    var a, n, s, r, _, d, i;
    (a = e._w),
      null != a.GG || null != a.W || null != a.E
        ? ((_ = 1),
          (d = 4),
          (n = t(a.GG, e._a[St], ot(Tt(), 1, 4).year)),
          (s = t(a.W, 1)),
          (r = t(a.E, 1)))
        : ((_ = e._locale._week.dow),
          (d = e._locale._week.doy),
          (n = t(a.gg, e._a[St], ot(Tt(), _, d).year)),
          (s = t(a.w, 1)),
          null != a.d
            ? ((r = a.d), _ > r && ++s)
            : (r = null != a.e ? a.e + _ : _)),
      (i = ut(n, s, r, d, _)),
      (e._a[St] = i.year),
      (e._dayOfYear = i.dayOfYear);
  }
  function $(e) {
    var a,
      n,
      s,
      r,
      _ = [];
    if (!e._d) {
      for (
        s = R(e),
          e._w && null == e._a[Wt] && null == e._a[jt] && q(e),
          e._dayOfYear &&
            ((r = t(e._a[St], s[St])),
            e._dayOfYear > x(r) && (e._pf._overflowDayOfYear = !0),
            (n = rt(r, 0, e._dayOfYear)),
            (e._a[jt] = n.getUTCMonth()),
            (e._a[Wt] = n.getUTCDate())),
          a = 0;
        3 > a && null == e._a[a];
        ++a
      )
        e._a[a] = _[a] = s[a];
      for (; 7 > a; a++)
        e._a[a] = _[a] = null == e._a[a] ? (2 === a ? 1 : 0) : e._a[a];
      24 === e._a[xt] &&
        0 === e._a[Ht] &&
        0 === e._a[Pt] &&
        0 === e._a[Ft] &&
        ((e._nextDay = !0), (e._a[xt] = 0)),
        (e._d = (e._useUTC ? rt : st).apply(null, _)),
        null != e._tzm && e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm),
        e._nextDay && (e._a[xt] = 24);
    }
  }
  function Z(e) {
    var t;
    e._d ||
      ((t = v(e._i)),
      (e._a = [
        t.year,
        t.month,
        t.day || t.date,
        t.hour,
        t.minute,
        t.second,
        t.millisecond,
      ]),
      $(e));
  }
  function R(e) {
    var t = new Date();
    return e._useUTC
      ? [t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate()]
      : [t.getFullYear(), t.getMonth(), t.getDate()];
  }
  function K(t) {
    if (t._f === Tt.ISO_8601) return void et(t);
    (t._a = []), (t._pf.empty = !0);
    var a,
      n,
      s,
      r,
      _,
      d = '' + t._i,
      i = d.length,
      o = 0;
    for (s = U(t._f, t._locale).match(Gt) || [], a = 0; a < s.length; a++)
      (r = s[a]),
        (n = (d.match(I(r, t)) || [])[0]),
        n &&
          ((_ = d.substr(0, d.indexOf(n))),
          _.length > 0 && t._pf.unusedInput.push(_),
          (d = d.slice(d.indexOf(n) + n.length)),
          (o += n.length)),
        Ya[r]
          ? (n ? (t._pf.empty = !1) : t._pf.unusedTokens.push(r), V(r, n, t))
          : t._strict && !n && t._pf.unusedTokens.push(r);
    (t._pf.charsLeftOver = i - o),
      d.length > 0 && t._pf.unusedInput.push(d),
      t._pf.bigHour === !0 && t._a[xt] <= 12 && (t._pf.bigHour = e),
      (t._a[xt] = u(t._locale, t._a[xt], t._meridiem)),
      $(t),
      P(t);
  }
  function B(e) {
    return e.replace(
      /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
      function (e, t, a, n, s) {
        return t || a || n || s;
      }
    );
  }
  function X(e) {
    return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }
  function Q(e) {
    var t, a, s, r, _;
    if (0 === e._f.length)
      return (e._pf.invalidFormat = !0), void (e._d = new Date(0 / 0));
    for (r = 0; r < e._f.length; r++)
      (_ = 0),
        (t = L({}, e)),
        null != e._useUTC && (t._useUTC = e._useUTC),
        (t._pf = n()),
        (t._f = e._f[r]),
        K(t),
        F(t) &&
          ((_ += t._pf.charsLeftOver),
          (_ += 10 * t._pf.unusedTokens.length),
          (t._pf.score = _),
          (null == s || s > _) && ((s = _), (a = t)));
    c(e, a || t);
  }
  function et(e) {
    var t,
      a,
      n = e._i,
      s = ra.exec(n);
    if (s) {
      for (e._pf.iso = !0, t = 0, a = da.length; a > t; t++)
        if (da[t][1].exec(n)) {
          e._f = da[t][0] + (s[6] || ' ');
          break;
        }
      for (t = 0, a = ia.length; a > t; t++)
        if (ia[t][1].exec(n)) {
          e._f += ia[t][0];
          break;
        }
      n.match(Rt) && (e._f += 'Z'), K(e);
    } else e._isValid = !1;
  }
  function tt(e) {
    et(e),
      e._isValid === !1 && (delete e._isValid, Tt.createFromInputFallback(e));
  }
  function at(e, t) {
    var a,
      n = [];
    for (a = 0; a < e.length; ++a) n.push(t(e[a], a));
    return n;
  }
  function nt(t) {
    var a,
      n = t._i;
    n === e
      ? (t._d = new Date())
      : k(n)
        ? (t._d = new Date(+n))
        : null !== (a = Ot.exec(n))
          ? (t._d = new Date(+a[1]))
          : 'string' == typeof n
            ? tt(t)
            : D(n)
              ? ((t._a = at(n.slice(0), function (e) {
                  return parseInt(e, 10);
                })),
                $(t))
              : 'object' == typeof n
                ? Z(t)
                : 'number' == typeof n
                  ? (t._d = new Date(n))
                  : Tt.createFromInputFallback(t);
  }
  function st(e, t, a, n, s, r, _) {
    var d = new Date(e, t, a, n, s, r, _);
    return 1970 > e && d.setFullYear(e), d;
  }
  function rt(e) {
    var t = new Date(Date.UTC.apply(null, arguments));
    return 1970 > e && t.setUTCFullYear(e), t;
  }
  function _t(e, t) {
    if ('string' == typeof e)
      if (isNaN(e)) {
        if (((e = t.weekdaysParse(e)), 'number' != typeof e)) return null;
      } else e = parseInt(e, 10);
    return e;
  }
  function dt(e, t, a, n, s) {
    return s.relativeTime(t || 1, !!a, e, n);
  }
  function it(e, t, a) {
    var n = Tt.duration(e).abs(),
      s = vt(n.as('s')),
      r = vt(n.as('m')),
      _ = vt(n.as('h')),
      d = vt(n.as('d')),
      i = vt(n.as('M')),
      o = vt(n.as('y')),
      u = (s < ca.s && ['s', s]) ||
        (1 === r && ['m']) ||
        (r < ca.m && ['mm', r]) ||
        (1 === _ && ['h']) ||
        (_ < ca.h && ['hh', _]) ||
        (1 === d && ['d']) ||
        (d < ca.d && ['dd', d]) ||
        (1 === i && ['M']) ||
        (i < ca.M && ['MM', i]) ||
        (1 === o && ['y']) || ['yy', o];
    return (u[2] = t), (u[3] = +e > 0), (u[4] = a), dt.apply({}, u);
  }
  function ot(e, t, a) {
    var n,
      s = a - t,
      r = a - e.day();
    return (
      r > s && (r -= 7),
      s - 7 > r && (r += 7),
      (n = Tt(e).add(r, 'd')),
      { week: Math.ceil(n.dayOfYear() / 7), year: n.year() }
    );
  }
  function ut(e, t, a, n, s) {
    var r,
      _,
      d = rt(e, 0, 1).getUTCDay();
    return (
      (d = 0 === d ? 7 : d),
      (a = null != a ? a : s),
      (r = s - d + (d > n ? 7 : 0) - (s > d ? 7 : 0)),
      (_ = 7 * (t - 1) + (a - s) + r + 1),
      { year: _ > 0 ? e : e - 1, dayOfYear: _ > 0 ? _ : x(e - 1) + _ }
    );
  }
  function lt(t) {
    var a,
      n = t._i,
      s = t._f;
    return (
      (t._locale = t._locale || Tt.localeData(t._l)),
      null === n || (s === e && '' === n)
        ? Tt.invalid({ nullInput: !0 })
        : ('string' == typeof n && (t._i = n = t._locale.preparse(n)),
          Tt.isMoment(n)
            ? new m(n, !0)
            : (s ? (D(s) ? Q(t) : K(t)) : nt(t),
              (a = new m(t)),
              a._nextDay && (a.add(1, 'd'), (a._nextDay = e)),
              a))
    );
  }
  function mt(e, t) {
    var a, n;
    if ((1 === t.length && D(t[0]) && (t = t[0]), !t.length)) return Tt();
    for (a = t[0], n = 1; n < t.length; ++n) t[n][e](a) && (a = t[n]);
    return a;
  }
  function Mt(e, t) {
    var a;
    return 'string' == typeof t &&
      ((t = e.localeData().monthsParse(t)), 'number' != typeof t)
      ? e
      : ((a = Math.min(e.date(), j(e.year(), t))),
        e._d['set' + (e._isUTC ? 'UTC' : '') + 'Month'](t, a),
        e);
  }
  function ct(e, t) {
    return e._d['get' + (e._isUTC ? 'UTC' : '') + t]();
  }
  function Lt(e, t, a) {
    return 'Month' === t
      ? Mt(e, a)
      : e._d['set' + (e._isUTC ? 'UTC' : '') + t](a);
  }
  function ht(e, t) {
    return function (a) {
      return null != a
        ? (Lt(this, e, a), Tt.updateOffset(this, t), this)
        : ct(this, e);
    };
  }
  function Yt(e) {
    return (400 * e) / 146097;
  }
  function ft(e) {
    return (146097 * e) / 400;
  }
  function yt(e) {
    Tt.duration.fn[e] = function () {
      return this._data[e];
    };
  }
  function pt(e) {
    'undefined' == typeof ender &&
      ((Dt = wt.moment),
      (wt.moment = e
        ? r(
            'Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.',
            Tt
          )
        : Tt));
  }
  for (
    var Tt,
      Dt,
      kt,
      gt = '2.9.0',
      wt =
        'undefined' == typeof global ||
        ('undefined' != typeof window && window !== global.window)
          ? this
          : global,
      vt = Math.round,
      bt = Object.prototype.hasOwnProperty,
      St = 0,
      jt = 1,
      Wt = 2,
      xt = 3,
      Ht = 4,
      Pt = 5,
      Ft = 6,
      zt = {},
      Et = [],
      At = 'undefined' != typeof module && module && module.exports,
      Ot = /^\/?Date\((\-?\d+)/i,
      Jt = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,
      Ct =
        /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,
      Gt =
        /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,
      Ut = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
      It = /\d\d?/,
      Nt = /\d{1,3}/,
      Vt = /\d{1,4}/,
      qt = /[+\-]?\d{1,6}/,
      $t = /\d+/,
      Zt =
        /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,
      Rt = /Z|[\+\-]\d\d:?\d\d/gi,
      Kt = /T/i,
      Bt = /[\+\-]?\d+/,
      Xt = /[\+\-]?\d+(\.\d{1,3})?/,
      Qt = /\d/,
      ea = /\d\d/,
      ta = /\d{3}/,
      aa = /\d{4}/,
      na = /[+-]?\d{6}/,
      sa = /[+-]?\d+/,
      ra =
        /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
      _a = 'YYYY-MM-DDTHH:mm:ssZ',
      da = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
        ['YYYY-DDD', /\d{4}-\d{3}/],
      ],
      ia = [
        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
        ['HH:mm', /(T| )\d\d:\d\d/],
        ['HH', /(T| )\d\d/],
      ],
      oa = /([\+\-]|\d\d)/gi,
      ua =
        ('Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        {
          Milliseconds: 1,
          Seconds: 1e3,
          Minutes: 6e4,
          Hours: 36e5,
          Days: 864e5,
          Months: 2592e6,
          Years: 31536e6,
        }),
      la = {
        ms: 'millisecond',
        s: 'second',
        m: 'minute',
        h: 'hour',
        d: 'day',
        D: 'date',
        w: 'week',
        W: 'isoWeek',
        M: 'month',
        Q: 'quarter',
        y: 'year',
        DDD: 'dayOfYear',
        e: 'weekday',
        E: 'isoWeekday',
        gg: 'weekYear',
        GG: 'isoWeekYear',
      },
      ma = {
        dayofyear: 'dayOfYear',
        isoweekday: 'isoWeekday',
        isoweek: 'isoWeek',
        weekyear: 'weekYear',
        isoweekyear: 'isoWeekYear',
      },
      Ma = {},
      ca = { s: 45, m: 45, h: 22, d: 26, M: 11 },
      La = 'DDD w W M D d'.split(' '),
      ha = 'M D H h m s w W'.split(' '),
      Ya = {
        M: function () {
          return this.month() + 1;
        },
        MMM: function (e) {
          return this.localeData().monthsShort(this, e);
        },
        MMMM: function (e) {
          return this.localeData().months(this, e);
        },
        D: function () {
          return this.date();
        },
        DDD: function () {
          return this.dayOfYear();
        },
        d: function () {
          return this.day();
        },
        dd: function (e) {
          return this.localeData().weekdaysMin(this, e);
        },
        ddd: function (e) {
          return this.localeData().weekdaysShort(this, e);
        },
        dddd: function (e) {
          return this.localeData().weekdays(this, e);
        },
        w: function () {
          return this.week();
        },
        W: function () {
          return this.isoWeek();
        },
        YY: function () {
          return Y(this.year() % 100, 2);
        },
        YYYY: function () {
          return Y(this.year(), 4);
        },
        YYYYY: function () {
          return Y(this.year(), 5);
        },
        YYYYYY: function () {
          var e = this.year(),
            t = e >= 0 ? '+' : '-';
          return t + Y(Math.abs(e), 6);
        },
        gg: function () {
          return Y(this.weekYear() % 100, 2);
        },
        gggg: function () {
          return Y(this.weekYear(), 4);
        },
        ggggg: function () {
          return Y(this.weekYear(), 5);
        },
        GG: function () {
          return Y(this.isoWeekYear() % 100, 2);
        },
        GGGG: function () {
          return Y(this.isoWeekYear(), 4);
        },
        GGGGG: function () {
          return Y(this.isoWeekYear(), 5);
        },
        e: function () {
          return this.weekday();
        },
        E: function () {
          return this.isoWeekday();
        },
        a: function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), !0);
        },
        A: function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), !1);
        },
        H: function () {
          return this.hours();
        },
        h: function () {
          return this.hours() % 12 || 12;
        },
        m: function () {
          return this.minutes();
        },
        s: function () {
          return this.seconds();
        },
        S: function () {
          return S(this.milliseconds() / 100);
        },
        SS: function () {
          return Y(S(this.milliseconds() / 10), 2);
        },
        SSS: function () {
          return Y(this.milliseconds(), 3);
        },
        SSSS: function () {
          return Y(this.milliseconds(), 3);
        },
        Z: function () {
          var e = this.utcOffset(),
            t = '+';
          return (
            0 > e && ((e = -e), (t = '-')),
            t + Y(S(e / 60), 2) + ':' + Y(S(e) % 60, 2)
          );
        },
        ZZ: function () {
          var e = this.utcOffset(),
            t = '+';
          return (
            0 > e && ((e = -e), (t = '-')),
            t + Y(S(e / 60), 2) + Y(S(e) % 60, 2)
          );
        },
        z: function () {
          return this.zoneAbbr();
        },
        zz: function () {
          return this.zoneName();
        },
        x: function () {
          return this.valueOf();
        },
        X: function () {
          return this.unix();
        },
        Q: function () {
          return this.quarter();
        },
      },
      fa = {},
      ya = [
        'months',
        'monthsShort',
        'weekdays',
        'weekdaysShort',
        'weekdaysMin',
      ],
      pa = !1;
    La.length;

  )
    (kt = La.pop()), (Ya[kt + 'o'] = i(Ya[kt], kt));
  for (; ha.length; ) (kt = ha.pop()), (Ya[kt + kt] = d(Ya[kt], 2));
  (Ya.DDDD = d(Ya.DDD, 3)),
    c(l.prototype, {
      set: function (e) {
        var t, a;
        for (a in e)
          (t = e[a]),
            'function' == typeof t ? (this[a] = t) : (this['_' + a] = t);
        this._ordinalParseLenient = new RegExp(
          this._ordinalParse.source + '|' + /\d{1,2}/.source
        );
      },
      _months:
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
        ),
      months: function (e) {
        return this._months[e.month()];
      },
      _monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
        '_'
      ),
      monthsShort: function (e) {
        return this._monthsShort[e.month()];
      },
      monthsParse: function (e, t, a) {
        var n, s, r;
        for (
          this._monthsParse ||
            ((this._monthsParse = []),
            (this._longMonthsParse = []),
            (this._shortMonthsParse = [])),
            n = 0;
          12 > n;
          n++
        ) {
          if (
            ((s = Tt.utc([2e3, n])),
            a &&
              !this._longMonthsParse[n] &&
              ((this._longMonthsParse[n] = new RegExp(
                '^' + this.months(s, '').replace('.', '') + '$',
                'i'
              )),
              (this._shortMonthsParse[n] = new RegExp(
                '^' + this.monthsShort(s, '').replace('.', '') + '$',
                'i'
              ))),
            a ||
              this._monthsParse[n] ||
              ((r = '^' + this.months(s, '') + '|^' + this.monthsShort(s, '')),
              (this._monthsParse[n] = new RegExp(r.replace('.', ''), 'i'))),
            a && 'MMMM' === t && this._longMonthsParse[n].test(e))
          )
            return n;
          if (a && 'MMM' === t && this._shortMonthsParse[n].test(e)) return n;
          if (!a && this._monthsParse[n].test(e)) return n;
        }
      },
      _weekdays:
        'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      weekdays: function (e) {
        return this._weekdays[e.day()];
      },
      _weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      weekdaysShort: function (e) {
        return this._weekdaysShort[e.day()];
      },
      _weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      weekdaysMin: function (e) {
        return this._weekdaysMin[e.day()];
      },
      weekdaysParse: function (e) {
        var t, a, n;
        for (
          this._weekdaysParse || (this._weekdaysParse = []), t = 0;
          7 > t;
          t++
        )
          if (
            (this._weekdaysParse[t] ||
              ((a = Tt([2e3, 1]).day(t)),
              (n =
                '^' +
                this.weekdays(a, '') +
                '|^' +
                this.weekdaysShort(a, '') +
                '|^' +
                this.weekdaysMin(a, '')),
              (this._weekdaysParse[t] = new RegExp(n.replace('.', ''), 'i'))),
            this._weekdaysParse[t].test(e))
          )
            return t;
      },
      _longDateFormat: {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY LT',
        LLLL: 'dddd, MMMM D, YYYY LT',
      },
      longDateFormat: function (e) {
        var t = this._longDateFormat[e];
        return (
          !t &&
            this._longDateFormat[e.toUpperCase()] &&
            ((t = this._longDateFormat[e.toUpperCase()].replace(
              /MMMM|MM|DD|dddd/g,
              function (e) {
                return e.slice(1);
              }
            )),
            (this._longDateFormat[e] = t)),
          t
        );
      },
      isPM: function (e) {
        return 'p' === (e + '').toLowerCase().charAt(0);
      },
      _meridiemParse: /[ap]\.?m?\.?/i,
      meridiem: function (e, t, a) {
        return e > 11 ? (a ? 'pm' : 'PM') : a ? 'am' : 'AM';
      },
      _calendar: {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      },
      calendar: function (e, t, a) {
        var n = this._calendar[e];
        return 'function' == typeof n ? n.apply(t, [a]) : n;
      },
      _relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      },
      relativeTime: function (e, t, a, n) {
        var s = this._relativeTime[a];
        return 'function' == typeof s ? s(e, t, a, n) : s.replace(/%d/i, e);
      },
      pastFuture: function (e, t) {
        var a = this._relativeTime[e > 0 ? 'future' : 'past'];
        return 'function' == typeof a ? a(t) : a.replace(/%s/i, t);
      },
      ordinal: function (e) {
        return this._ordinal.replace('%d', e);
      },
      _ordinal: '%d',
      _ordinalParse: /\d{1,2}/,
      preparse: function (e) {
        return e;
      },
      postformat: function (e) {
        return e;
      },
      week: function (e) {
        return ot(e, this._week.dow, this._week.doy).week;
      },
      _week: { dow: 0, doy: 6 },
      firstDayOfWeek: function () {
        return this._week.dow;
      },
      firstDayOfYear: function () {
        return this._week.doy;
      },
      _invalidDate: 'Invalid date',
      invalidDate: function () {
        return this._invalidDate;
      },
    }),
    (Tt = function (t, a, s, r) {
      var _;
      return (
        'boolean' == typeof s && ((r = s), (s = e)),
        (_ = {}),
        (_._isAMomentObject = !0),
        (_._i = t),
        (_._f = a),
        (_._l = s),
        (_._strict = r),
        (_._isUTC = !1),
        (_._pf = n()),
        lt(_)
      );
    }),
    (Tt.suppressDeprecationWarnings = !1),
    (Tt.createFromInputFallback = r(
      'moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.',
      function (e) {
        e._d = new Date(e._i + (e._useUTC ? ' UTC' : ''));
      }
    )),
    (Tt.min = function () {
      var e = [].slice.call(arguments, 0);
      return mt('isBefore', e);
    }),
    (Tt.max = function () {
      var e = [].slice.call(arguments, 0);
      return mt('isAfter', e);
    }),
    (Tt.utc = function (t, a, s, r) {
      var _;
      return (
        'boolean' == typeof s && ((r = s), (s = e)),
        (_ = {}),
        (_._isAMomentObject = !0),
        (_._useUTC = !0),
        (_._isUTC = !0),
        (_._l = s),
        (_._i = t),
        (_._f = a),
        (_._strict = r),
        (_._pf = n()),
        lt(_).utc()
      );
    }),
    (Tt.unix = function (e) {
      return Tt(1e3 * e);
    }),
    (Tt.duration = function (e, t) {
      var n,
        s,
        r,
        _,
        d = e,
        i = null;
      return (
        Tt.isDuration(e)
          ? (d = { ms: e._milliseconds, d: e._days, M: e._months })
          : 'number' == typeof e
            ? ((d = {}), t ? (d[t] = e) : (d.milliseconds = e))
            : (i = Jt.exec(e))
              ? ((n = '-' === i[1] ? -1 : 1),
                (d = {
                  y: 0,
                  d: S(i[Wt]) * n,
                  h: S(i[xt]) * n,
                  m: S(i[Ht]) * n,
                  s: S(i[Pt]) * n,
                  ms: S(i[Ft]) * n,
                }))
              : (i = Ct.exec(e))
                ? ((n = '-' === i[1] ? -1 : 1),
                  (r = function (e) {
                    var t = e && parseFloat(e.replace(',', '.'));
                    return (isNaN(t) ? 0 : t) * n;
                  }),
                  (d = {
                    y: r(i[2]),
                    M: r(i[3]),
                    d: r(i[4]),
                    h: r(i[5]),
                    m: r(i[6]),
                    s: r(i[7]),
                    w: r(i[8]),
                  }))
                : null == d
                  ? (d = {})
                  : 'object' == typeof d &&
                    ('from' in d || 'to' in d) &&
                    ((_ = y(Tt(d.from), Tt(d.to))),
                    (d = {}),
                    (d.ms = _.milliseconds),
                    (d.M = _.months)),
        (s = new M(d)),
        Tt.isDuration(e) && a(e, '_locale') && (s._locale = e._locale),
        s
      );
    }),
    (Tt.version = gt),
    (Tt.defaultFormat = _a),
    (Tt.ISO_8601 = function () {}),
    (Tt.momentProperties = Et),
    (Tt.updateOffset = function () {}),
    (Tt.relativeTimeThreshold = function (t, a) {
      return ca[t] === e ? !1 : a === e ? ca[t] : ((ca[t] = a), !0);
    }),
    (Tt.lang = r(
      'moment.lang is deprecated. Use moment.locale instead.',
      function (e, t) {
        return Tt.locale(e, t);
      }
    )),
    (Tt.locale = function (e, t) {
      var a;
      return (
        e &&
          ((a =
            'undefined' != typeof t ? Tt.defineLocale(e, t) : Tt.localeData(e)),
          a && (Tt.duration._locale = Tt._locale = a)),
        Tt._locale._abbr
      );
    }),
    (Tt.defineLocale = function (e, t) {
      return null !== t
        ? ((t.abbr = e),
          zt[e] || (zt[e] = new l()),
          zt[e].set(t),
          Tt.locale(e),
          zt[e])
        : (delete zt[e], null);
    }),
    (Tt.langData = r(
      'moment.langData is deprecated. Use moment.localeData instead.',
      function (e) {
        return Tt.localeData(e);
      }
    )),
    (Tt.localeData = function (e) {
      var t;
      if ((e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e))
        return Tt._locale;
      if (!D(e)) {
        if ((t = A(e))) return t;
        e = [e];
      }
      return E(e);
    }),
    (Tt.isMoment = function (e) {
      return e instanceof m || (null != e && a(e, '_isAMomentObject'));
    }),
    (Tt.isDuration = function (e) {
      return e instanceof M;
    });
  for (kt = ya.length - 1; kt >= 0; --kt) b(ya[kt]);
  (Tt.normalizeUnits = function (e) {
    return w(e);
  }),
    (Tt.invalid = function (e) {
      var t = Tt.utc(0 / 0);
      return null != e ? c(t._pf, e) : (t._pf.userInvalidated = !0), t;
    }),
    (Tt.parseZone = function () {
      return Tt.apply(null, arguments).parseZone();
    }),
    (Tt.parseTwoDigitYear = function (e) {
      return S(e) + (S(e) > 68 ? 1900 : 2e3);
    }),
    (Tt.isDate = k),
    c((Tt.fn = m.prototype), {
      clone: function () {
        return Tt(this);
      },
      valueOf: function () {
        return +this._d - 6e4 * (this._offset || 0);
      },
      unix: function () {
        return Math.floor(+this / 1e3);
      },
      toString: function () {
        return this.clone()
          .locale('en')
          .format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      },
      toDate: function () {
        return this._offset ? new Date(+this) : this._d;
      },
      toISOString: function () {
        var e = Tt(this).utc();
        return 0 < e.year() && e.year() <= 9999
          ? 'function' == typeof Date.prototype.toISOString
            ? this.toDate().toISOString()
            : G(e, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]')
          : G(e, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
      },
      toArray: function () {
        var e = this;
        return [
          e.year(),
          e.month(),
          e.date(),
          e.hours(),
          e.minutes(),
          e.seconds(),
          e.milliseconds(),
        ];
      },
      isValid: function () {
        return F(this);
      },
      isDSTShifted: function () {
        return this._a
          ? this.isValid() &&
              g(
                this._a,
                (this._isUTC ? Tt.utc(this._a) : Tt(this._a)).toArray()
              ) > 0
          : !1;
      },
      parsingFlags: function () {
        return c({}, this._pf);
      },
      invalidAt: function () {
        return this._pf.overflow;
      },
      utc: function (e) {
        return this.utcOffset(0, e);
      },
      local: function (e) {
        return (
          this._isUTC &&
            (this.utcOffset(0, e),
            (this._isUTC = !1),
            e && this.subtract(this._dateUtcOffset(), 'm')),
          this
        );
      },
      format: function (e) {
        var t = G(this, e || Tt.defaultFormat);
        return this.localeData().postformat(t);
      },
      add: p(1, 'add'),
      subtract: p(-1, 'subtract'),
      diff: function (e, t, a) {
        var n,
          s,
          r = O(e, this),
          _ = 6e4 * (r.utcOffset() - this.utcOffset());
        return (
          (t = w(t)),
          'year' === t || 'month' === t || 'quarter' === t
            ? ((s = o(this, r)),
              'quarter' === t ? (s /= 3) : 'year' === t && (s /= 12))
            : ((n = this - r),
              (s =
                'second' === t
                  ? n / 1e3
                  : 'minute' === t
                    ? n / 6e4
                    : 'hour' === t
                      ? n / 36e5
                      : 'day' === t
                        ? (n - _) / 864e5
                        : 'week' === t
                          ? (n - _) / 6048e5
                          : n)),
          a ? s : h(s)
        );
      },
      from: function (e, t) {
        return Tt.duration({ to: this, from: e })
          .locale(this.locale())
          .humanize(!t);
      },
      fromNow: function (e) {
        return this.from(Tt(), e);
      },
      calendar: function (e) {
        var t = e || Tt(),
          a = O(t, this).startOf('day'),
          n = this.diff(a, 'days', !0),
          s =
            -6 > n
              ? 'sameElse'
              : -1 > n
                ? 'lastWeek'
                : 0 > n
                  ? 'lastDay'
                  : 1 > n
                    ? 'sameDay'
                    : 2 > n
                      ? 'nextDay'
                      : 7 > n
                        ? 'nextWeek'
                        : 'sameElse';
        return this.format(this.localeData().calendar(s, this, Tt(t)));
      },
      isLeapYear: function () {
        return H(this.year());
      },
      isDST: function () {
        return (
          this.utcOffset() > this.clone().month(0).utcOffset() ||
          this.utcOffset() > this.clone().month(5).utcOffset()
        );
      },
      day: function (e) {
        var t = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        return null != e
          ? ((e = _t(e, this.localeData())), this.add(e - t, 'd'))
          : t;
      },
      month: ht('Month', !0),
      startOf: function (e) {
        switch ((e = w(e))) {
          case 'year':
            this.month(0);
          case 'quarter':
          case 'month':
            this.date(1);
          case 'week':
          case 'isoWeek':
          case 'day':
            this.hours(0);
          case 'hour':
            this.minutes(0);
          case 'minute':
            this.seconds(0);
          case 'second':
            this.milliseconds(0);
        }
        return (
          'week' === e
            ? this.weekday(0)
            : 'isoWeek' === e && this.isoWeekday(1),
          'quarter' === e && this.month(3 * Math.floor(this.month() / 3)),
          this
        );
      },
      endOf: function (t) {
        return (
          (t = w(t)),
          t === e || 'millisecond' === t
            ? this
            : this.startOf(t)
                .add(1, 'isoWeek' === t ? 'week' : t)
                .subtract(1, 'ms')
        );
      },
      isAfter: function (e, t) {
        var a;
        return (
          (t = w('undefined' != typeof t ? t : 'millisecond')),
          'millisecond' === t
            ? ((e = Tt.isMoment(e) ? e : Tt(e)), +this > +e)
            : ((a = Tt.isMoment(e) ? +e : +Tt(e)), a < +this.clone().startOf(t))
        );
      },
      isBefore: function (e, t) {
        var a;
        return (
          (t = w('undefined' != typeof t ? t : 'millisecond')),
          'millisecond' === t
            ? ((e = Tt.isMoment(e) ? e : Tt(e)), +e > +this)
            : ((a = Tt.isMoment(e) ? +e : +Tt(e)), +this.clone().endOf(t) < a)
        );
      },
      isBetween: function (e, t, a) {
        return this.isAfter(e, a) && this.isBefore(t, a);
      },
      isSame: function (e, t) {
        var a;
        return (
          (t = w(t || 'millisecond')),
          'millisecond' === t
            ? ((e = Tt.isMoment(e) ? e : Tt(e)), +this === +e)
            : ((a = +Tt(e)),
              +this.clone().startOf(t) <= a && a <= +this.clone().endOf(t))
        );
      },
      min: r(
        'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
        function (e) {
          return (e = Tt.apply(null, arguments)), this > e ? this : e;
        }
      ),
      max: r(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function (e) {
          return (e = Tt.apply(null, arguments)), e > this ? this : e;
        }
      ),
      zone: r(
        'moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779',
        function (e, t) {
          return null != e
            ? ('string' != typeof e && (e = -e), this.utcOffset(e, t), this)
            : -this.utcOffset();
        }
      ),
      utcOffset: function (e, t) {
        var a,
          n = this._offset || 0;
        return null != e
          ? ('string' == typeof e && (e = N(e)),
            Math.abs(e) < 16 && (e = 60 * e),
            !this._isUTC && t && (a = this._dateUtcOffset()),
            (this._offset = e),
            (this._isUTC = !0),
            null != a && this.add(a, 'm'),
            n !== e &&
              (!t || this._changeInProgress
                ? T(this, Tt.duration(e - n, 'm'), 1, !1)
                : this._changeInProgress ||
                  ((this._changeInProgress = !0),
                  Tt.updateOffset(this, !0),
                  (this._changeInProgress = null))),
            this)
          : this._isUTC
            ? n
            : this._dateUtcOffset();
      },
      isLocal: function () {
        return !this._isUTC;
      },
      isUtcOffset: function () {
        return this._isUTC;
      },
      isUtc: function () {
        return this._isUTC && 0 === this._offset;
      },
      zoneAbbr: function () {
        return this._isUTC ? 'UTC' : '';
      },
      zoneName: function () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
      },
      parseZone: function () {
        return (
          this._tzm
            ? this.utcOffset(this._tzm)
            : 'string' == typeof this._i && this.utcOffset(N(this._i)),
          this
        );
      },
      hasAlignedHourOffset: function (e) {
        return (
          (e = e ? Tt(e).utcOffset() : 0), (this.utcOffset() - e) % 60 === 0
        );
      },
      daysInMonth: function () {
        return j(this.year(), this.month());
      },
      dayOfYear: function (e) {
        var t =
          vt((Tt(this).startOf('day') - Tt(this).startOf('year')) / 864e5) + 1;
        return null == e ? t : this.add(e - t, 'd');
      },
      quarter: function (e) {
        return null == e
          ? Math.ceil((this.month() + 1) / 3)
          : this.month(3 * (e - 1) + (this.month() % 3));
      },
      weekYear: function (e) {
        var t = ot(
          this,
          this.localeData()._week.dow,
          this.localeData()._week.doy
        ).year;
        return null == e ? t : this.add(e - t, 'y');
      },
      isoWeekYear: function (e) {
        var t = ot(this, 1, 4).year;
        return null == e ? t : this.add(e - t, 'y');
      },
      week: function (e) {
        var t = this.localeData().week(this);
        return null == e ? t : this.add(7 * (e - t), 'd');
      },
      isoWeek: function (e) {
        var t = ot(this, 1, 4).week;
        return null == e ? t : this.add(7 * (e - t), 'd');
      },
      weekday: function (e) {
        var t = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return null == e ? t : this.add(e - t, 'd');
      },
      isoWeekday: function (e) {
        return null == e
          ? this.day() || 7
          : this.day(this.day() % 7 ? e : e - 7);
      },
      isoWeeksInYear: function () {
        return W(this.year(), 1, 4);
      },
      weeksInYear: function () {
        var e = this.localeData()._week;
        return W(this.year(), e.dow, e.doy);
      },
      get: function (e) {
        return (e = w(e)), this[e]();
      },
      set: function (e, t) {
        var a;
        if ('object' == typeof e) for (a in e) this.set(a, e[a]);
        else (e = w(e)), 'function' == typeof this[e] && this[e](t);
        return this;
      },
      locale: function (t) {
        var a;
        return t === e
          ? this._locale._abbr
          : ((a = Tt.localeData(t)), null != a && (this._locale = a), this);
      },
      lang: r(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (t) {
          return t === e ? this.localeData() : this.locale(t);
        }
      ),
      localeData: function () {
        return this._locale;
      },
      _dateUtcOffset: function () {
        return 15 * -Math.round(this._d.getTimezoneOffset() / 15);
      },
    }),
    (Tt.fn.millisecond = Tt.fn.milliseconds = ht('Milliseconds', !1)),
    (Tt.fn.second = Tt.fn.seconds = ht('Seconds', !1)),
    (Tt.fn.minute = Tt.fn.minutes = ht('Minutes', !1)),
    (Tt.fn.hour = Tt.fn.hours = ht('Hours', !0)),
    (Tt.fn.date = ht('Date', !0)),
    (Tt.fn.dates = r(
      'dates accessor is deprecated. Use date instead.',
      ht('Date', !0)
    )),
    (Tt.fn.year = ht('FullYear', !0)),
    (Tt.fn.years = r(
      'years accessor is deprecated. Use year instead.',
      ht('FullYear', !0)
    )),
    (Tt.fn.days = Tt.fn.day),
    (Tt.fn.months = Tt.fn.month),
    (Tt.fn.weeks = Tt.fn.week),
    (Tt.fn.isoWeeks = Tt.fn.isoWeek),
    (Tt.fn.quarters = Tt.fn.quarter),
    (Tt.fn.toJSON = Tt.fn.toISOString),
    (Tt.fn.isUTC = Tt.fn.isUtc),
    c((Tt.duration.fn = M.prototype), {
      _bubble: function () {
        var e,
          t,
          a,
          n = this._milliseconds,
          s = this._days,
          r = this._months,
          _ = this._data,
          d = 0;
        (_.milliseconds = n % 1e3),
          (e = h(n / 1e3)),
          (_.seconds = e % 60),
          (t = h(e / 60)),
          (_.minutes = t % 60),
          (a = h(t / 60)),
          (_.hours = a % 24),
          (s += h(a / 24)),
          (d = h(Yt(s))),
          (s -= h(ft(d))),
          (r += h(s / 30)),
          (s %= 30),
          (d += h(r / 12)),
          (r %= 12),
          (_.days = s),
          (_.months = r),
          (_.years = d);
      },
      abs: function () {
        return (
          (this._milliseconds = Math.abs(this._milliseconds)),
          (this._days = Math.abs(this._days)),
          (this._months = Math.abs(this._months)),
          (this._data.milliseconds = Math.abs(this._data.milliseconds)),
          (this._data.seconds = Math.abs(this._data.seconds)),
          (this._data.minutes = Math.abs(this._data.minutes)),
          (this._data.hours = Math.abs(this._data.hours)),
          (this._data.months = Math.abs(this._data.months)),
          (this._data.years = Math.abs(this._data.years)),
          this
        );
      },
      weeks: function () {
        return h(this.days() / 7);
      },
      valueOf: function () {
        return (
          this._milliseconds +
          864e5 * this._days +
          (this._months % 12) * 2592e6 +
          31536e6 * S(this._months / 12)
        );
      },
      humanize: function (e) {
        var t = it(this, !e, this.localeData());
        return (
          e && (t = this.localeData().pastFuture(+this, t)),
          this.localeData().postformat(t)
        );
      },
      add: function (e, t) {
        var a = Tt.duration(e, t);
        return (
          (this._milliseconds += a._milliseconds),
          (this._days += a._days),
          (this._months += a._months),
          this._bubble(),
          this
        );
      },
      subtract: function (e, t) {
        var a = Tt.duration(e, t);
        return (
          (this._milliseconds -= a._milliseconds),
          (this._days -= a._days),
          (this._months -= a._months),
          this._bubble(),
          this
        );
      },
      get: function (e) {
        return (e = w(e)), this[e.toLowerCase() + 's']();
      },
      as: function (e) {
        var t, a;
        if (((e = w(e)), 'month' === e || 'year' === e))
          return (
            (t = this._days + this._milliseconds / 864e5),
            (a = this._months + 12 * Yt(t)),
            'month' === e ? a : a / 12
          );
        switch (((t = this._days + Math.round(ft(this._months / 12))), e)) {
          case 'week':
            return t / 7 + this._milliseconds / 6048e5;
          case 'day':
            return t + this._milliseconds / 864e5;
          case 'hour':
            return 24 * t + this._milliseconds / 36e5;
          case 'minute':
            return 24 * t * 60 + this._milliseconds / 6e4;
          case 'second':
            return 24 * t * 60 * 60 + this._milliseconds / 1e3;
          case 'millisecond':
            return Math.floor(24 * t * 60 * 60 * 1e3) + this._milliseconds;
          default:
            throw new Error('Unknown unit ' + e);
        }
      },
      lang: Tt.fn.lang,
      locale: Tt.fn.locale,
      toIsoString: r(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        function () {
          return this.toISOString();
        }
      ),
      toISOString: function () {
        var e = Math.abs(this.years()),
          t = Math.abs(this.months()),
          a = Math.abs(this.days()),
          n = Math.abs(this.hours()),
          s = Math.abs(this.minutes()),
          r = Math.abs(this.seconds() + this.milliseconds() / 1e3);
        return this.asSeconds()
          ? (this.asSeconds() < 0 ? '-' : '') +
              'P' +
              (e ? e + 'Y' : '') +
              (t ? t + 'M' : '') +
              (a ? a + 'D' : '') +
              (n || s || r ? 'T' : '') +
              (n ? n + 'H' : '') +
              (s ? s + 'M' : '') +
              (r ? r + 'S' : '')
          : 'P0D';
      },
      localeData: function () {
        return this._locale;
      },
      toJSON: function () {
        return this.toISOString();
      },
    }),
    (Tt.duration.fn.toString = Tt.duration.fn.toISOString);
  for (kt in ua) a(ua, kt) && yt(kt.toLowerCase());
  (Tt.duration.fn.asMilliseconds = function () {
    return this.as('ms');
  }),
    (Tt.duration.fn.asSeconds = function () {
      return this.as('s');
    }),
    (Tt.duration.fn.asMinutes = function () {
      return this.as('m');
    }),
    (Tt.duration.fn.asHours = function () {
      return this.as('h');
    }),
    (Tt.duration.fn.asDays = function () {
      return this.as('d');
    }),
    (Tt.duration.fn.asWeeks = function () {
      return this.as('weeks');
    }),
    (Tt.duration.fn.asMonths = function () {
      return this.as('M');
    }),
    (Tt.duration.fn.asYears = function () {
      return this.as('y');
    }),
    Tt.locale('en', {
      ordinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function (e) {
        var t = e % 10,
          a =
            1 === S((e % 100) / 10)
              ? 'th'
              : 1 === t
                ? 'st'
                : 2 === t
                  ? 'nd'
                  : 3 === t
                    ? 'rd'
                    : 'th';
        return e + a;
      },
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('af', {
        months:
          'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split(
            '_'
          ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split(
          '_'
        ),
        weekdays:
          'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split(
            '_'
          ),
        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM: function (e) {
          return /^nm$/i.test(e);
        },
        meridiem: function (e, t, a) {
          return 12 > e ? (a ? 'vm' : 'VM') : a ? 'nm' : 'NM';
        },
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Vandag om] LT',
          nextDay: '[M  re om] LT',
          nextWeek: 'dddd [om] LT',
          lastDay: '[Gister om] LT',
          lastWeek: '[Laas] dddd [om] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'oor %s',
          past: '%s gelede',
          s: "'n paar sekondes",
          m: "'n minuut",
          mm: '%d minute',
          h: "'n uur",
          hh: '%d ure',
          d: "'n dag",
          dd: '%d dae',
          M: "'n maand",
          MM: '%d maande',
          y: "'n jaar",
          yy: '%d jaar',
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (e) {
          return e + (1 === e || 8 === e || e >= 20 ? 'ste' : 'de');
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('ar-ma', {
        months:
          '          _            _        _          _      _          _            _      _          _            _          _          '.split(
            '_'
          ),
        monthsShort:
          '          _            _        _          _      _          _            _      _          _            _          _          '.split(
            '_'
          ),
        weekdays:
          '          _              _                _                _            _            _          '.split(
            '_'
          ),
        weekdaysShort:
          '      _          _            _            _        _        _      '.split(
            '_'
          ),
        weekdaysMin: '  _  _  _  _  _  _  '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[                              ] LT',
          nextDay: '[                          ] LT',
          nextWeek: 'dddd [                   ] LT',
          lastDay: '[                          ] LT',
          lastWeek: 'dddd [                   ] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '     %s',
          past: '       %s',
          s: '        ',
          m: '          ',
          mm: '%d           ',
          h: '        ',
          hh: '%d           ',
          d: '      ',
          dd: '%d         ',
          M: '      ',
          MM: '%d         ',
          y: '      ',
          yy: '%d           ',
        },
        week: { dow: 6, doy: 12 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
          1: '  ',
          2: '  ',
          3: '  ',
          4: '  ',
          5: '  ',
          6: '  ',
          7: '  ',
          8: '  ',
          9: '  ',
          0: '  ',
        },
        a = {
          '  ': '1',
          '  ': '2',
          '  ': '3',
          '  ': '4',
          '  ': '5',
          '  ': '6',
          '  ': '7',
          '  ': '8',
          '  ': '9',
          '  ': '0',
        };
      return e.defineLocale('ar-sa', {
        months:
          '          _            _        _          _        _          _          _          _            _            _            _            '.split(
            '_'
          ),
        monthsShort:
          '          _            _        _          _        _          _          _          _            _            _            _            '.split(
            '_'
          ),
        weekdays:
          '          _              _                _                _            _            _          '.split(
            '_'
          ),
        weekdaysShort:
          '      _          _            _            _        _        _      '.split(
            '_'
          ),
        weekdaysMin: '  _  _  _  _  _  _  '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'HH:mm:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        meridiemParse: /  |  /,
        isPM: function (e) {
          return '  ' === e;
        },
        meridiem: function (e) {
          return 12 > e ? '  ' : '  ';
        },
        calendar: {
          sameDay: '[                              ] LT',
          nextDay: '[                          ] LT',
          nextWeek: 'dddd [                   ] LT',
          lastDay: '[                          ] LT',
          lastWeek: 'dddd [                   ] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '     %s',
          past: '       %s',
          s: '        ',
          m: '          ',
          mm: '%d           ',
          h: '        ',
          hh: '%d           ',
          d: '      ',
          dd: '%d         ',
          M: '      ',
          MM: '%d         ',
          y: '      ',
          yy: '%d           ',
        },
        preparse: function (e) {
          return e
            .replace(/[                    ]/g, function (e) {
              return a[e];
            })
            .replace(/  /g, ',');
        },
        postformat: function (e) {
          return e
            .replace(/\d/g, function (e) {
              return t[e];
            })
            .replace(/,/g, '  ');
        },
        week: { dow: 6, doy: 12 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('ar-tn', {
        months:
          '          _          _        _          _      _        _            _      _            _            _            _            '.split(
            '_'
          ),
        monthsShort:
          '          _          _        _          _      _        _            _      _            _            _            _            '.split(
            '_'
          ),
        weekdays:
          '          _              _                _                _            _            _          '.split(
            '_'
          ),
        weekdaysShort:
          '      _          _            _            _        _        _      '.split(
            '_'
          ),
        weekdaysMin: '  _  _  _  _  _  _  '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[                              ] LT',
          nextDay: '[                          ] LT',
          nextWeek: 'dddd [                   ] LT',
          lastDay: '[                          ] LT',
          lastWeek: 'dddd [                   ] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '     %s',
          past: '       %s',
          s: '        ',
          m: '          ',
          mm: '%d           ',
          h: '        ',
          hh: '%d           ',
          d: '      ',
          dd: '%d         ',
          M: '      ',
          MM: '%d         ',
          y: '      ',
          yy: '%d           ',
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
          1: '  ',
          2: '  ',
          3: '  ',
          4: '  ',
          5: '  ',
          6: '  ',
          7: '  ',
          8: '  ',
          9: '  ',
          0: '  ',
        },
        a = {
          '  ': '1',
          '  ': '2',
          '  ': '3',
          '  ': '4',
          '  ': '5',
          '  ': '6',
          '  ': '7',
          '  ': '8',
          '  ': '9',
          '  ': '0',
        },
        n = function (e) {
          return 0 === e
            ? 0
            : 1 === e
              ? 1
              : 2 === e
                ? 2
                : e % 100 >= 3 && 10 >= e % 100
                  ? 3
                  : e % 100 >= 11
                    ? 4
                    : 5;
        },
        s = {
          s: [
            '                      ',
            '                     ',
            ['              ', '              '],
            '%d         ',
            '%d           ',
            '%d           ',
          ],
          m: [
            '                      ',
            '                     ',
            ['              ', '              '],
            '%d           ',
            '%d           ',
            '%d           ',
          ],
          h: [
            '                    ',
            '                   ',
            ['            ', '            '],
            '%d           ',
            '%d         ',
            '%d         ',
          ],
          d: [
            '                  ',
            '               ',
            ['          ', '          '],
            '%d         ',
            '%d           ',
            '%d       ',
          ],
          M: [
            '                  ',
            '               ',
            ['          ', '          '],
            '%d         ',
            '%d         ',
            '%d       ',
          ],
          y: [
            '                  ',
            '               ',
            ['          ', '          '],
            '%d           ',
            '%d           ',
            '%d       ',
          ],
        },
        r = function (e) {
          return function (t, a) {
            var r = n(t),
              _ = s[e][n(t)];
            return 2 === r && (_ = _[a ? 0 : 1]), _.replace(/%d/i, t);
          };
        },
        _ = [
          '                                  ',
          '                     ',
          '                 ',
          '                     ',
          '                 ',
          '                       ',
          '                   ',
          '               ',
          '                       ',
          '                                  ',
          '                                    ',
          '                                  ',
        ];
      return e.defineLocale('ar', {
        months: _,
        monthsShort: _,
        weekdays:
          '          _              _                _                _            _            _          '.split(
            '_'
          ),
        weekdaysShort:
          '      _          _            _            _        _        _      '.split(
            '_'
          ),
        weekdaysMin: '  _  _  _  _  _  _  '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'HH:mm:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        meridiemParse: /  |  /,
        isPM: function (e) {
          return '  ' === e;
        },
        meridiem: function (e) {
          return 12 > e ? '  ' : '  ';
        },
        calendar: {
          sameDay: '[                              ] LT',
          nextDay: '[                            ] LT',
          nextWeek: 'dddd [                   ] LT',
          lastDay: '[                          ] LT',
          lastWeek: 'dddd [                   ] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '       %s',
          past: '       %s',
          s: r('s'),
          m: r('m'),
          mm: r('m'),
          h: r('h'),
          hh: r('h'),
          d: r('d'),
          dd: r('d'),
          M: r('M'),
          MM: r('M'),
          y: r('y'),
          yy: r('y'),
        },
        preparse: function (e) {
          return e
            .replace(/[                    ]/g, function (e) {
              return a[e];
            })
            .replace(/  /g, ',');
        },
        postformat: function (e) {
          return e
            .replace(/\d/g, function (e) {
              return t[e];
            })
            .replace(/,/g, '  ');
        },
        week: { dow: 6, doy: 12 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-  nc  ',
        4: '-  nc  ',
        100: '-  nc  ',
        6: '-nc  ',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-  nc  ',
        90: '-  nc  ',
      };
      return e.defineLocale('az', {
        months:
          'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split(
            '_'
          ),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split(
          '_'
        ),
        weekdays:
          'Bazar_Bazar ert  si_    r    nb   ax  am  _    r    nb  _C  m   ax  am  _C  m  _    nb  '.split(
            '_'
          ),
        weekdaysShort: 'Baz_BzE_  Ax_    r_CAx_C  m_    n'.split('_'),
        weekdaysMin: 'Bz_BE_  A_    _CA_C  _    '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[bug  n saat] LT',
          nextDay: '[sabah saat] LT',
          nextWeek: '[g  l  n h  ft  ] dddd [saat] LT',
          lastDay: '[d  n  n] LT',
          lastWeek: '[ke    n h  ft  ] dddd [saat] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s sonra',
          past: '%s   vv  l',
          s: 'birne     saniyy  ',
          m: 'bir d  qiq  ',
          mm: '%d d  qiq  ',
          h: 'bir saat',
          hh: '%d saat',
          d: 'bir g  n',
          dd: '%d g  n',
          M: 'bir ay',
          MM: '%d ay',
          y: 'bir il',
          yy: '%d il',
        },
        meridiemParse: /gec  |s  h  r|g  nd  z|ax  am/,
        isPM: function (e) {
          return /^(g nd z|ax am)$/.test(e);
        },
        meridiem: function (e) {
          return 4 > e
            ? 'gec  '
            : 12 > e
              ? 's  h  r'
              : 17 > e
                ? 'g  nd  z'
                : 'ax  am';
        },
        ordinalParse: /\d{1,2}-(  nc  |inci|nci|  nc  |nc  |uncu)/,
        ordinal: function (e) {
          if (0 === e) return e + '-  nc  ';
          var a = e % 10,
            n = (e % 100) - a,
            s = e >= 100 ? 100 : null;
          return e + (t[a] || t[n] || t[s]);
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t) {
        var a = e.split('_');
        return t % 10 === 1 && t % 100 !== 11
          ? a[0]
          : t % 10 >= 2 && 4 >= t % 10 && (10 > t % 100 || t % 100 >= 20)
            ? a[1]
            : a[2];
      }
      function a(e, a, n) {
        var s = {
          mm: a
            ? '              _              _            '
            : '              _              _            ',
          hh: a
            ? '              _              _            '
            : '              _              _            ',
          dd: '          _      _        ',
          MM: '          _            _              ',
          yy: '      _        _          ',
        };
        return 'm' === n
          ? a
            ? '              '
            : '              '
          : 'h' === n
            ? a
              ? '              '
              : '              '
            : e + ' ' + t(s[n], +e);
      }
      function n(e, t) {
        var a = {
            nominative:
              '                _        _              _                _              _              _            _              _                _                    _                _              '.split(
                '_'
              ),
            accusative:
              '                _            _                _                  _            _              _            _            _              _                      _                  _            '.split(
                '_'
              ),
          },
          n = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(t)
            ? 'accusative'
            : 'nominative';
        return a[n][e.month()];
      }
      function s(e, t) {
        var a = {
            nominative:
              '              _                    _              _            _            _              _            '.split(
                '_'
              ),
            accusative:
              '              _                    _              _            _            _              _            '.split(
                '_'
              ),
          },
          n =
            /\[ ?[    ] ?(?:              |                  )? ?\] ?dddd/.test(
              t
            )
              ? 'accusative'
              : 'nominative';
        return a[n][e.day()];
      }
      return e.defineLocale('be', {
        months: n,
        monthsShort:
          '        _      _      _        _        _        _      _        _      _        _        _        '.split(
            '_'
          ),
        weekdays: s,
        weekdaysShort: '    _    _    _    _    _    _    '.split('_'),
        weekdaysMin: '    _    _    _    _    _    _    '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY   .',
          LLL: 'D MMMM YYYY   ., LT',
          LLLL: 'dddd, D MMMM YYYY   ., LT',
        },
        calendar: {
          sameDay: '[             ] LT',
          nextDay: '[               ] LT',
          lastDay: '[             ] LT',
          nextWeek: function () {
            return '[  ] dddd [  ] LT';
          },
          lastWeek: function () {
            switch (this.day()) {
              case 0:
              case 3:
              case 5:
              case 6:
                return '[                 ] dddd [  ] LT';
              case 1:
              case 2:
              case 4:
                return '[               ] dddd [  ] LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: '         %s',
          past: '%s         ',
          s: '                             ',
          m: a,
          mm: a,
          h: a,
          hh: a,
          d: '          ',
          dd: a,
          M: '          ',
          MM: a,
          y: '      ',
          yy: a,
        },
        meridiemParse: /        |            |      |            /,
        isPM: function (e) {
          return /^(|)$/.test(e);
        },
        meridiem: function (e) {
          return 4 > e
            ? '        '
            : 12 > e
              ? '            '
              : 17 > e
                ? '      '
                : '            ';
        },
        ordinalParse: /\d{1,2}-(  |  |    )/,
        ordinal: function (e, t) {
          switch (t) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
              return (e % 10 !== 2 && e % 10 !== 3) ||
                e % 100 === 12 ||
                e % 100 === 13
                ? e + '-  '
                : e + '-  ';
            case 'D':
              return e + '-    ';
            default:
              return e;
          }
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('bg', {
        months:
          '            _                _        _          _      _      _      _            _                  _                _              _                '.split(
            '_'
          ),
        monthsShort:
          '      _      _      _      _      _      _      _      _      _      _      _      '.split(
            '_'
          ),
        weekdays:
          '            _                    _              _          _                  _          _            '.split(
            '_'
          ),
        weekdaysShort: '      _      _      _      _      _      _      '.split(
          '_'
        ),
        weekdaysMin: '    _    _    _    _    _    _    '.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'D.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[           ] LT',
          nextDay: '[           ] LT',
          nextWeek: 'dddd [  ] LT',
          lastDay: '[             ] LT',
          lastWeek: function () {
            switch (this.day()) {
              case 0:
              case 3:
              case 6:
                return '[                       ] dddd [  ] LT';
              case 1:
              case 2:
              case 4:
              case 5:
                return '[                     ] dddd [  ] LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: '         %s',
          past: '           %s',
          s: '                             ',
          m: '            ',
          mm: '%d             ',
          h: '      ',
          hh: '%d         ',
          d: '      ',
          dd: '%d       ',
          M: '          ',
          MM: '%d             ',
          y: '            ',
          yy: '%d             ',
        },
        ordinalParse: /\d{1,2}-(    |    |    |    |    |    )/,
        ordinal: function (e) {
          var t = e % 10,
            a = e % 100;
          return 0 === e
            ? e + '-    '
            : 0 === a
              ? e + '-    '
              : a > 10 && 20 > a
                ? e + '-    '
                : 1 === t
                  ? e + '-    '
                  : 2 === t
                    ? e + '-    '
                    : 7 === t || 8 === t
                      ? e + '-    '
                      : e + '-    ';
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
          1: '   ',
          2: '   ',
          3: '   ',
          4: '   ',
          5: '   ',
          6: '   ',
          7: '   ',
          8: '   ',
          9: '   ',
          0: '   ',
        },
        a = {
          '   ': '1',
          '   ': '2',
          '   ': '3',
          '   ': '4',
          '   ': '5',
          '   ': '6',
          '   ': '7',
          '   ': '8',
          '   ': '9',
          '   ': '0',
        };
      return e.defineLocale('bn', {
        months:
          '                        _                        _               _                  _      _         _               _                  _                              _                     _                     _                        '.split(
            '_'
          ),
        monthsShort:
          '            _         _               _         _      _         _         _      _               _               _      _                  '.split(
            '_'
          ),
        weekdays:
          '                  _                  _                        _                  _                                       _                           _                  '.split(
            '_'
          ),
        weekdaysShort:
          '         _         _               _         _                              _                  _         '.split(
            '_'
          ),
        weekdaysMin:
          '      _      _            _      _               _      _         '.split(
            '_'
          ),
        longDateFormat: {
          LT: 'A h:mm          ',
          LTS: 'A h:mm:ss          ',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT',
        },
        calendar: {
          sameDay: '[      ] LT',
          nextDay: '[                        ] LT',
          nextWeek: 'dddd, LT',
          lastDay: '[               ] LT',
          lastWeek: '[      ] dddd, LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s          ',
          past: '%s          ',
          s: '                               ',
          m: '                      ',
          mm: '%d                ',
          h: '                      ',
          hh: '%d                ',
          d: '                ',
          dd: '%d          ',
          M: '                ',
          MM: '%d          ',
          y: '                ',
          yy: '%d          ',
        },
        preparse: function (e) {
          return e.replace(/[                              ]/g, function (e) {
            return a[e];
          });
        },
        postformat: function (e) {
          return e.replace(/\d/g, function (e) {
            return t[e];
          });
        },
        meridiemParse:
          /         |            |               |               |         /,
        isPM: function (e) {
          return /^(||)$/.test(e);
        },
        meridiem: function (e) {
          return 4 > e
            ? '         '
            : 10 > e
              ? '            '
              : 17 > e
                ? '               '
                : 20 > e
                  ? '               '
                  : '         ';
        },
        week: { dow: 0, doy: 6 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
          1: '   ',
          2: '   ',
          3: '   ',
          4: '   ',
          5: '   ',
          6: '   ',
          7: '   ',
          8: '   ',
          9: '   ',
          0: '   ',
        },
        a = {
          '   ': '1',
          '   ': '2',
          '   ': '3',
          '   ': '4',
          '   ': '5',
          '   ': '6',
          '   ': '7',
          '   ': '8',
          '   ': '9',
          '   ': '0',
        };
      return e.defineLocale('bo', {
        months:
          '                              _                                 _                                 _                              _                           _                                 _                                 _                                    _                              _                              _                                             _                                             '.split(
            '_'
          ),
        monthsShort:
          '                              _                                 _                                 _                              _                           _                                 _                                 _                                    _                              _                              _                                             _                                             '.split(
            '_'
          ),
        weekdays:
          '                           _                           _                                    _                              _                              _                              _                                 '.split(
            '_'
          ),
        weekdaysShort:
          '               _               _                        _                  _                  _                  _                     '.split(
            '_'
          ),
        weekdaysMin:
          '               _               _                        _                  _                  _                  _                     '.split(
            '_'
          ),
        longDateFormat: {
          LT: 'A h:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT',
        },
        calendar: {
          sameDay: '[                  ] LT',
          nextDay: '[                  ] LT',
          nextWeek: '[                                             ], LT',
          lastDay: '[            ] LT',
          lastWeek: '[                                          ] dddd, LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s       ',
          past: '%s                ',
          s: '               ',
          m: '                              ',
          mm: '%d                ',
          h: '                                 ',
          hh: '%d                   ',
          d: '                        ',
          dd: '%d             ',
          M: '                           ',
          MM: '%d             ',
          y: '                     ',
          yy: '%d       ',
        },
        preparse: function (e) {
          return e.replace(/[                              ]/g, function (e) {
            return a[e];
          });
        },
        postformat: function (e) {
          return e.replace(/\d/g, function (e) {
            return t[e];
          });
        },
        meridiemParse:
          /                  |                     |                     |                     |                  /,
        isPM: function (e) {
          return /^(||)$/.test(e);
        },
        meridiem: function (e) {
          return 4 > e
            ? '                  '
            : 10 > e
              ? '                     '
              : 17 > e
                ? '                     '
                : 20 > e
                  ? '                     '
                  : '                  ';
        },
        week: { dow: 0, doy: 6 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (t) {
      function a(e, t, a) {
        var n = { mm: 'munutenn', MM: 'miz', dd: 'devezh' };
        return e + ' ' + r(n[a], e);
      }
      function n(e) {
        switch (s(e)) {
          case 1:
          case 3:
          case 4:
          case 5:
          case 9:
            return e + ' bloaz';
          default:
            return e + ' vloaz';
        }
      }
      function s(e) {
        return e > 9 ? s(e % 10) : e;
      }
      function r(e, t) {
        return 2 === t ? _(e) : e;
      }
      function _(t) {
        var a = { m: 'v', b: 'v', d: 'z' };
        return a[t.charAt(0)] === e ? t : a[t.charAt(0)] + t.substring(1);
      }
      return t.defineLocale('br', {
        months:
          "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split(
            '_'
          ),
        monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split(
          '_'
        ),
        weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        longDateFormat: {
          LT: 'h[e]mm A',
          LTS: 'h[e]mm:ss A',
          L: 'DD/MM/YYYY',
          LL: 'D [a viz] MMMM YYYY',
          LLL: 'D [a viz] MMMM YYYY LT',
          LLLL: 'dddd, D [a viz] MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Hiziv da] LT',
          nextDay: "[Warc'hoazh da] LT",
          nextWeek: 'dddd [da] LT',
          lastDay: "[Dec'h da] LT",
          lastWeek: 'dddd [paset da] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'a-benn %s',
          past: "%s 'zo",
          s: 'un nebeud segondenno  ',
          m: 'ur vunutenn',
          mm: a,
          h: 'un eur',
          hh: '%d eur',
          d: 'un devezh',
          dd: a,
          M: 'ur miz',
          MM: a,
          y: 'ur bloaz',
          yy: n,
        },
        ordinalParse: /\d{1,2}(a  |vet)/,
        ordinal: function (e) {
          var t = 1 === e ? 'a  ' : 'vet';
          return e + t;
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a) {
        var n = e + ' ';
        switch (a) {
          case 'm':
            return t ? 'jedna minuta' : 'jedne minute';
          case 'mm':
            return (n +=
              1 === e
                ? 'minuta'
                : 2 === e || 3 === e || 4 === e
                  ? 'minute'
                  : 'minuta');
          case 'h':
            return t ? 'jedan sat' : 'jednog sata';
          case 'hh':
            return (n +=
              1 === e
                ? 'sat'
                : 2 === e || 3 === e || 4 === e
                  ? 'sata'
                  : 'sati');
          case 'dd':
            return (n += 1 === e ? 'dan' : 'dana');
          case 'MM':
            return (n +=
              1 === e
                ? 'mjesec'
                : 2 === e || 3 === e || 4 === e
                  ? 'mjeseca'
                  : 'mjeseci');
          case 'yy':
            return (n +=
              1 === e
                ? 'godina'
                : 2 === e || 3 === e || 4 === e
                  ? 'godine'
                  : 'godina');
        }
      }
      return e.defineLocale('bs', {
        months:
          'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split(
            '_'
          ),
        monthsShort:
          'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split(
            '_'
          ),
        weekdays:
          'nedjelja_ponedjeljak_utorak_srijeda_  etvrtak_petak_subota'.split(
            '_'
          ),
        weekdaysShort: 'ned._pon._uto._sri._  et._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_  e_pe_su'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD. MM. YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[danas u] LT',
          nextDay: '[sutra u] LT',
          nextWeek: function () {
            switch (this.day()) {
              case 0:
                return '[u] [nedjelju] [u] LT';
              case 3:
                return '[u] [srijedu] [u] LT';
              case 6:
                return '[u] [subotu] [u] LT';
              case 1:
              case 2:
              case 4:
              case 5:
                return '[u] dddd [u] LT';
            }
          },
          lastDay: '[ju  er u] LT',
          lastWeek: function () {
            switch (this.day()) {
              case 0:
              case 3:
                return '[pro  lu] dddd [u] LT';
              case 6:
                return '[pro  le] [subote] [u] LT';
              case 1:
              case 2:
              case 4:
              case 5:
                return '[pro  li] dddd [u] LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: 'za %s',
          past: 'prije %s',
          s: 'par sekundi',
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: 'dan',
          dd: t,
          M: 'mjesec',
          MM: t,
          y: 'godinu',
          yy: t,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('ca', {
        months:
          'gener_febrer_mar  _abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split(
            '_'
          ),
        monthsShort:
          'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split(
            '_'
          ),
        weekdays:
          'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split(
            '_'
          ),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: function () {
            return '[avui a ' + (1 !== this.hours() ? 'les' : 'la') + '] LT';
          },
          nextDay: function () {
            return '[dem   a ' + (1 !== this.hours() ? 'les' : 'la') + '] LT';
          },
          nextWeek: function () {
            return 'dddd [a ' + (1 !== this.hours() ? 'les' : 'la') + '] LT';
          },
          lastDay: function () {
            return '[ahir a ' + (1 !== this.hours() ? 'les' : 'la') + '] LT';
          },
          lastWeek: function () {
            return (
              '[el] dddd [passat a ' +
              (1 !== this.hours() ? 'les' : 'la') +
              '] LT'
            );
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: 'en %s',
          past: 'fa %s',
          s: 'uns segons',
          m: 'un minut',
          mm: '%d minuts',
          h: 'una hora',
          hh: '%d hores',
          d: 'un dia',
          dd: '%d dies',
          M: 'un mes',
          MM: '%d mesos',
          y: 'un any',
          yy: '%d anys',
        },
        ordinalParse: /\d{1,2}(r|n|t|  |a)/,
        ordinal: function (e, t) {
          var a =
            1 === e
              ? 'r'
              : 2 === e
                ? 'n'
                : 3 === e
                  ? 'r'
                  : 4 === e
                    ? 't'
                    : '  ';
          return ('w' === t || 'W' === t) && (a = 'a'), e + a;
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e) {
        return e > 1 && 5 > e && 1 !== ~~(e / 10);
      }
      function a(e, a, n, s) {
        var r = e + ' ';
        switch (n) {
          case 's':
            return a || s ? 'p  r sekund' : 'p  r sekundami';
          case 'm':
            return a ? 'minuta' : s ? 'minutu' : 'minutou';
          case 'mm':
            return a || s ? r + (t(e) ? 'minuty' : 'minut') : r + 'minutami';
          case 'h':
            return a ? 'hodina' : s ? 'hodinu' : 'hodinou';
          case 'hh':
            return a || s ? r + (t(e) ? 'hodiny' : 'hodin') : r + 'hodinami';
          case 'd':
            return a || s ? 'den' : 'dnem';
          case 'dd':
            return a || s ? r + (t(e) ? 'dny' : 'dn  ') : r + 'dny';
          case 'M':
            return a || s ? 'm  s  c' : 'm  s  cem';
          case 'MM':
            return a || s
              ? r + (t(e) ? 'm  s  ce' : 'm  s  c  ')
              : r + 'm  s  ci';
          case 'y':
            return a || s ? 'rok' : 'rokem';
          case 'yy':
            return a || s ? r + (t(e) ? 'roky' : 'let') : r + 'lety';
        }
      }
      var n =
          'leden_  nor_b  ezen_duben_kv  ten_  erven_  ervenec_srpen_z      _    jen_listopad_prosinec'.split(
            '_'
          ),
        s = 'led_  no_b  e_dub_kv  _  vn_  vc_srp_z    _    j_lis_pro'.split(
          '_'
        );
      return e.defineLocale('cs', {
        months: n,
        monthsShort: s,
        monthsParse: (function (e, t) {
          var a,
            n = [];
          for (a = 0; 12 > a; a++)
            n[a] = new RegExp('^' + e[a] + '$|^' + t[a] + '$', 'i');
          return n;
        })(n, s),
        weekdays:
          'ned  le_pond  l  _  ter  _st  eda_  tvrtek_p  tek_sobota'.split('_'),
        weekdaysShort: 'ne_po_  t_st_  t_p  _so'.split('_'),
        weekdaysMin: 'ne_po_  t_st_  t_p  _so'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd D. MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[dnes v] LT',
          nextDay: '[z  tra v] LT',
          nextWeek: function () {
            switch (this.day()) {
              case 0:
                return '[v ned  li v] LT';
              case 1:
              case 2:
                return '[v] dddd [v] LT';
              case 3:
                return '[ve st  edu v] LT';
              case 4:
                return '[ve   tvrtek v] LT';
              case 5:
                return '[v p  tek v] LT';
              case 6:
                return '[v sobotu v] LT';
            }
          },
          lastDay: '[v  era v] LT',
          lastWeek: function () {
            switch (this.day()) {
              case 0:
                return '[minulou ned  li v] LT';
              case 1:
              case 2:
                return '[minul  ] dddd [v] LT';
              case 3:
                return '[minulou st  edu v] LT';
              case 4:
              case 5:
                return '[minul  ] dddd [v] LT';
              case 6:
                return '[minulou sobotu v] LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: 'za %s',
          past: 'p  ed %s',
          s: a,
          m: a,
          mm: a,
          h: a,
          hh: a,
          d: a,
          dd: a,
          M: a,
          MM: a,
          y: a,
          yy: a,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('cv', {
        months:
          '            _          _      _      _      _            _      _          _        _      _      _            '.split(
            '_'
          ),
        monthsShort:
          '      _      _      _      _      _      _      _      _    _      _      _      '.split(
            '_'
          ),
        weekdays:
          '                      _                _                  _          _                      _              _                '.split(
            '_'
          ),
        weekdaysShort: '      _      _      _    _      _      _      '.split(
          '_'
        ),
        weekdaysMin: '    _    _    _    _    _    _    '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD-MM-YYYY',
          LL: 'YYYY [          ] MMMM [            ] D[-        ]',
          LLL: 'YYYY [          ] MMMM [            ] D[-        ], LT',
          LLLL: 'dddd, YYYY [          ] MMMM [            ] D[-        ], LT',
        },
        calendar: {
          sameDay: '[        ] LT [              ]',
          nextDay: '[        ] LT [              ]',
          lastDay: '[        ] LT [              ]',
          nextWeek: '[          ] dddd LT [              ]',
          lastWeek: '[          ] dddd LT [              ]',
          sameElse: 'L',
        },
        relativeTime: {
          future: function (e) {
            var t = /          $/i.exec(e)
              ? '      '
              : /      $/i.exec(e)
                ? '      '
                : '      ';
            return e + t;
          },
          past: '%s             ',
          s: '      -                   ',
          m: '                 ',
          mm: '%d           ',
          h: '                 ',
          hh: '%d           ',
          d: '             ',
          dd: '%d       ',
          M: '               ',
          MM: '%d         ',
          y: '             ',
          yy: '%d       ',
        },
        ordinalParse: /\d{1,2}-      /,
        ordinal: '%d-      ',
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('cy', {
        months:
          'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split(
            '_'
          ),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split(
          '_'
        ),
        weekdays:
          'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split(
            '_'
          ),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Heddiw am] LT',
          nextDay: '[Yfory am] LT',
          nextWeek: 'dddd [am] LT',
          lastDay: '[Ddoe am] LT',
          lastWeek: 'dddd [diwethaf am] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'mewn %s',
          past: '%s yn   l',
          s: 'ychydig eiliadau',
          m: 'munud',
          mm: '%d munud',
          h: 'awr',
          hh: '%d awr',
          d: 'diwrnod',
          dd: '%d diwrnod',
          M: 'mis',
          MM: '%d mis',
          y: 'blwyddyn',
          yy: '%d flynedd',
        },
        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        ordinal: function (e) {
          var t = e,
            a = '',
            n = [
              '',
              'af',
              'il',
              'ydd',
              'ydd',
              'ed',
              'ed',
              'ed',
              'fed',
              'fed',
              'fed',
              'eg',
              'fed',
              'eg',
              'eg',
              'fed',
              'eg',
              'eg',
              'fed',
              'eg',
              'fed',
            ];
          return (
            t > 20
              ? (a =
                  40 === t || 50 === t || 60 === t || 80 === t || 100 === t
                    ? 'fed'
                    : 'ain')
              : t > 0 && (a = n[t]),
            e + a
          );
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('da', {
        months:
          'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split(
            '_'
          ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split(
          '_'
        ),
        weekdays: 's  ndag_mandag_tirsdag_onsdag_torsdag_fredag_l  rdag'.split(
          '_'
        ),
        weekdaysShort: 's  n_man_tir_ons_tor_fre_l  r'.split('_'),
        weekdaysMin: 's  _ma_ti_on_to_fr_l  '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd [d.] D. MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[I dag kl.] LT',
          nextDay: '[I morgen kl.] LT',
          nextWeek: 'dddd [kl.] LT',
          lastDay: '[I g  r kl.] LT',
          lastWeek: '[sidste] dddd [kl] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'om %s',
          past: '%s siden',
          s: 'f   sekunder',
          m: 'et minut',
          mm: '%d minutter',
          h: 'en time',
          hh: '%d timer',
          d: 'en dag',
          dd: '%d dage',
          M: 'en m  ned',
          MM: '%d m  neder',
          y: 'et   r',
          yy: '%d   r',
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a) {
        var n = {
          m: ['eine Minute', 'einer Minute'],
          h: ['eine Stunde', 'einer Stunde'],
          d: ['ein Tag', 'einem Tag'],
          dd: [e + ' Tage', e + ' Tagen'],
          M: ['ein Monat', 'einem Monat'],
          MM: [e + ' Monate', e + ' Monaten'],
          y: ['ein Jahr', 'einem Jahr'],
          yy: [e + ' Jahre', e + ' Jahren'],
        };
        return t ? n[a][0] : n[a][1];
      }
      return e.defineLocale('de-at', {
        months:
          'J  nner_Februar_M  rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
          ),
        monthsShort:
          'J  n._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split(
            '_'
          ),
        weekdays:
          'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
            '_'
          ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'HH:mm:ss',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Heute um] LT [Uhr]',
          sameElse: 'L',
          nextDay: '[Morgen um] LT [Uhr]',
          nextWeek: 'dddd [um] LT [Uhr]',
          lastDay: '[Gestern um] LT [Uhr]',
          lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
          future: 'in %s',
          past: 'vor %s',
          s: 'ein paar Sekunden',
          m: t,
          mm: '%d Minuten',
          h: t,
          hh: '%d Stunden',
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a) {
        var n = {
          m: ['eine Minute', 'einer Minute'],
          h: ['eine Stunde', 'einer Stunde'],
          d: ['ein Tag', 'einem Tag'],
          dd: [e + ' Tage', e + ' Tagen'],
          M: ['ein Monat', 'einem Monat'],
          MM: [e + ' Monate', e + ' Monaten'],
          y: ['ein Jahr', 'einem Jahr'],
          yy: [e + ' Jahre', e + ' Jahren'],
        };
        return t ? n[a][0] : n[a][1];
      }
      return e.defineLocale('de', {
        months:
          'Januar_Februar_M  rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
          ),
        monthsShort:
          'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split(
            '_'
          ),
        weekdays:
          'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
            '_'
          ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'HH:mm:ss',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Heute um] LT [Uhr]',
          sameElse: 'L',
          nextDay: '[Morgen um] LT [Uhr]',
          nextWeek: 'dddd [um] LT [Uhr]',
          lastDay: '[Gestern um] LT [Uhr]',
          lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
          future: 'in %s',
          past: 'vor %s',
          s: 'ein paar Sekunden',
          m: t,
          mm: '%d Minuten',
          h: t,
          hh: '%d Stunden',
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('el', {
        monthsNominativeEl:
          '                    _                      _              _                _          _              _              _                  _                      _                  _                  _                    '.split(
            '_'
          ),
        monthsGenitiveEl:
          '                    _                      _              _                _          _              _              _                  _                      _                  _                  _                    '.split(
            '_'
          ),
        months: function (e, t) {
          return /D/.test(t.substring(0, t.indexOf('MMMM')))
            ? this._monthsGenitiveEl[e.month()]
            : this._monthsNominativeEl[e.month()];
        },
        monthsShort:
          '      _      _      _      _      _        _        _      _      _      _      _      '.split(
            '_'
          ),
        weekdays:
          '              _              _          _              _            _                  _              '.split(
            '_'
          ),
        weekdaysShort: '      _      _      _      _      _      _      '.split(
          '_'
        ),
        weekdaysMin: '    _    _    _    _    _    _    '.split('_'),
        meridiem: function (e, t, a) {
          return e > 11 ? (a ? '    ' : '    ') : a ? '    ' : '    ';
        },
        isPM: function (e) {
          return '  ' === (e + '').toLowerCase()[0];
        },
        meridiemParse: /[    ]\.?  ?\.?/i,
        longDateFormat: {
          LT: 'h:mm A',
          LTS: 'h:mm:ss A',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendarEl: {
          sameDay: '[             {}] LT',
          nextDay: '[           {}] LT',
          nextWeek: 'dddd [{}] LT',
          lastDay: '[         {}] LT',
          lastWeek: function () {
            switch (this.day()) {
              case 6:
                return '[                           ] dddd [{}] LT';
              default:
                return '[                             ] dddd [{}] LT';
            }
          },
          sameElse: 'L',
        },
        calendar: function (e, t) {
          var a = this._calendarEl[e],
            n = t && t.hours();
          return (
            'function' == typeof a && (a = a.apply(t)),
            a.replace('{}', n % 12 === 1 ? '      ' : '        ')
          );
        },
        relativeTime: {
          future: '     %s',
          past: '%s         ',
          s: '                                 ',
          m: '                 ',
          mm: '%d           ',
          h: '             ',
          hh: '%d         ',
          d: '               ',
          dd: '%d           ',
          M: '                   ',
          MM: '%d           ',
          y: '                     ',
          yy: '%d             ',
        },
        ordinalParse: /\d{1,2}  /,
        ordinal: '%d  ',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('en-au', {
        months:
          'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
          ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
          '_'
        ),
        weekdays:
          'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'h:mm A',
          LTS: 'h:mm:ss A',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Today at] LT',
          nextDay: '[Tomorrow at] LT',
          nextWeek: 'dddd [at] LT',
          lastDay: '[Yesterday at] LT',
          lastWeek: '[Last] dddd [at] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'in %s',
          past: '%s ago',
          s: 'a few seconds',
          m: 'a minute',
          mm: '%d minutes',
          h: 'an hour',
          hh: '%d hours',
          d: 'a day',
          dd: '%d days',
          M: 'a month',
          MM: '%d months',
          y: 'a year',
          yy: '%d years',
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (e) {
          var t = e % 10,
            a =
              1 === ~~((e % 100) / 10)
                ? 'th'
                : 1 === t
                  ? 'st'
                  : 2 === t
                    ? 'nd'
                    : 3 === t
                      ? 'rd'
                      : 'th';
          return e + a;
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('en-ca', {
        months:
          'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
          ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
          '_'
        ),
        weekdays:
          'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'h:mm A',
          LTS: 'h:mm:ss A',
          L: 'YYYY-MM-DD',
          LL: 'D MMMM, YYYY',
          LLL: 'D MMMM, YYYY LT',
          LLLL: 'dddd, D MMMM, YYYY LT',
        },
        calendar: {
          sameDay: '[Today at] LT',
          nextDay: '[Tomorrow at] LT',
          nextWeek: 'dddd [at] LT',
          lastDay: '[Yesterday at] LT',
          lastWeek: '[Last] dddd [at] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'in %s',
          past: '%s ago',
          s: 'a few seconds',
          m: 'a minute',
          mm: '%d minutes',
          h: 'an hour',
          hh: '%d hours',
          d: 'a day',
          dd: '%d days',
          M: 'a month',
          MM: '%d months',
          y: 'a year',
          yy: '%d years',
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (e) {
          var t = e % 10,
            a =
              1 === ~~((e % 100) / 10)
                ? 'th'
                : 1 === t
                  ? 'st'
                  : 2 === t
                    ? 'nd'
                    : 3 === t
                      ? 'rd'
                      : 'th';
          return e + a;
        },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('en-gb', {
        months:
          'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
          ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
          '_'
        ),
        weekdays:
          'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'HH:mm:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Today at] LT',
          nextDay: '[Tomorrow at] LT',
          nextWeek: 'dddd [at] LT',
          lastDay: '[Yesterday at] LT',
          lastWeek: '[Last] dddd [at] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'in %s',
          past: '%s ago',
          s: 'a few seconds',
          m: 'a minute',
          mm: '%d minutes',
          h: 'an hour',
          hh: '%d hours',
          d: 'a day',
          dd: '%d days',
          M: 'a month',
          MM: '%d months',
          y: 'a year',
          yy: '%d years',
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (e) {
          var t = e % 10,
            a =
              1 === ~~((e % 100) / 10)
                ? 'th'
                : 1 === t
                  ? 'st'
                  : 2 === t
                    ? 'nd'
                    : 3 === t
                      ? 'rd'
                      : 'th';
          return e + a;
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('eo', {
        months:
          'januaro_februaro_marto_aprilo_majo_junio_julio_a  gusto_septembro_oktobro_novembro_decembro'.split(
            '_'
          ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_a  g_sep_okt_nov_dec'.split(
          '_'
        ),
        weekdays: 'Diman  o_Lundo_Mardo_Merkredo_  a  do_Vendredo_Sabato'.split(
          '_'
        ),
        weekdaysShort: 'Dim_Lun_Mard_Merk_  a  _Ven_Sab'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_  a_Ve_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'YYYY-MM-DD',
          LL: 'D[-an de] MMMM, YYYY',
          LLL: 'D[-an de] MMMM, YYYY LT',
          LLLL: 'dddd, [la] D[-an de] MMMM, YYYY LT',
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (e) {
          return 'p' === e.charAt(0).toLowerCase();
        },
        meridiem: function (e, t, a) {
          return e > 11 ? (a ? 'p.t.m.' : 'P.T.M.') : a ? 'a.t.m.' : 'A.T.M.';
        },
        calendar: {
          sameDay: '[Hodia   je] LT',
          nextDay: '[Morga   je] LT',
          nextWeek: 'dddd [je] LT',
          lastDay: '[Hiera   je] LT',
          lastWeek: '[pasinta] dddd [je] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'je %s',
          past: 'anta   %s',
          s: 'sekundoj',
          m: 'minuto',
          mm: '%d minutoj',
          h: 'horo',
          hh: '%d horoj',
          d: 'tago',
          dd: '%d tagoj',
          M: 'monato',
          MM: '%d monatoj',
          y: 'jaro',
          yy: '%d jaroj',
        },
        ordinalParse: /\d{1,2}a/,
        ordinal: '%da',
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t =
          'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
            '_'
          ),
        a = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
      return e.defineLocale('es', {
        months:
          'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
          ),
        monthsShort: function (e, n) {
          return /-MMM-/.test(n) ? a[e.month()] : t[e.month()];
        },
        weekdays:
          'domingo_lunes_martes_mi  rcoles_jueves_viernes_s  bado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mi  ._jue._vie._s  b.'.split('_'),
        weekdaysMin: 'Do_Lu_Ma_Mi_Ju_Vi_S  '.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D[de]MMMM[de]YYYY',
          LLL: 'D[de]MMMM[de]YYYY LT',
          LLLL: 'dddd,D[de]MMMM[de]YYYY LT',
        },
        calendar: {
          sameDay: function () {
            return '[hoy a la' + (1 !== this.hours() ? 's' : '') + ']LT';
          },
          nextDay: function () {
            return '[ma ana a la' + (1 !== this.hours() ? 's' : '') + ']LT';
          },
          nextWeek: function () {
            return 'dddd[a la' + (1 !== this.hours() ? 's' : '') + ']LT';
          },
          lastDay: function () {
            return '[ayer a la' + (1 !== this.hours() ? 's' : '') + ']LT';
          },
          lastWeek: function () {
            return (
              '[el]dddd[pasado a la' + (1 !== this.hours() ? 's' : '') + ']LT'
            );
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: 'en%s',
          past: 'hace%s',
          s: 'unos segundos',
          m: 'un minuto',
          mm: '%d minutos',
          h: 'una hora',
          hh: '%d horas',
          d: 'un d a',
          dd: '%d d as',
          M: 'un mes',
          MM: '%d meses',
          y: 'un a o',
          yy: '%d a os',
        },
        ordinalParse: /\d{1,2}  /,
        ordinal: '%d',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a, n) {
        var s = {
          s: ['m ne sekundi', 'm ni sekund', 'paar sekundit'],
          m: ['he minuti', 'ks minut'],
          mm: [e + 'minuti', e + 'minutit'],
          h: ['he tunni', 'tund aega', 'ks tund'],
          hh: [e + 'tunni', e + 'tundi'],
          d: ['he p eva', 'ks p ev'],
          M: ['kuu aja', 'kuu aega', 'ks kuu'],
          MM: [e + 'kuu', e + 'kuud'],
          y: ['he aasta', 'aasta', 'ks aasta'],
          yy: [e + 'aasta', e + 'aastat'],
        };
        return t ? (s[a][2] ? s[a][2] : s[a][1]) : n ? s[a][0] : s[a][1];
      }
      return e.defineLocale('et', {
        months:
          'jaanuar_veebruar_m rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split(
            '_'
          ),
        monthsShort:
          'jaan_veebr_m rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split(
            '_'
          ),
        weekdays:
          'p hap ev_esmasp ev_teisip ev_kolmap ev_neljap ev_reede_laup ev'.split(
            '_'
          ),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D.MMMM YYYY',
          LLL: 'D.MMMM YYYY LT',
          LLLL: 'dddd,D.MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[T na,]LT',
          nextDay: '[Homme,]LT',
          nextWeek: '[J rgmine]dddd LT',
          lastDay: '[Eile,]LT',
          lastWeek: '[Eelmine]dddd LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s p rast',
          past: '%s tagasi',
          s: t,
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: t,
          dd: '%d p eva',
          M: t,
          MM: t,
          y: t,
          yy: t,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('eu', {
        months:
          'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split(
            '_'
          ),
        monthsShort:
          'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split(
            '_'
          ),
        weekdays:
          'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split(
            '_'
          ),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'YYYY-MM-DD',
          LL: 'YYYY[ko]MMMM[ren]D[a]',
          LLL: 'YYYY[ko]MMMM[ren]D[a]LT',
          LLLL: 'dddd,YYYY[ko]MMMM[ren]D[a]LT',
          l: 'YYYY-M-D',
          ll: 'YYYY[ko]MMM D[a]',
          lll: 'YYYY[ko]MMM D[a]LT',
          llll: 'ddd,YYYY[ko]MMM D[a]LT',
        },
        calendar: {
          sameDay: '[gaur]LT[etan]',
          nextDay: '[bihar]LT[etan]',
          nextWeek: 'dddd LT[etan]',
          lastDay: '[atzo]LT[etan]',
          lastWeek: '[aurreko]dddd LT[etan]',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s barru',
          past: 'duela%s',
          s: 'segundo batzuk',
          m: 'minutu bat',
          mm: '%d minutu',
          h: 'ordu bat',
          hh: '%d ordu',
          d: 'egun bat',
          dd: '%d egun',
          M: 'hilabete bat',
          MM: '%d hilabete',
          y: 'urte bat',
          yy: '%d urte',
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
          1: '',
          2: '',
          3: '',
          4: '',
          5: '',
          6: '',
          7: '',
          8: '',
          9: '',
          0: '',
        },
        a = {
          '': '1',
          '': '2',
          '': '3',
          '': '4',
          '': '5',
          '': '6',
          '': '7',
          '': '8',
          '': '9',
          '': '0',
        };
      return e.defineLocale('fa', {
        months: '_ _ _ _ _ _ _ _ _ _ _'.split('_'),
        monthsShort: '_ _ _ _ _ _ _ _ _ _ _'.split('_'),
        weekdays: '_ _ _ _ _ _'.split('_'),
        weekdaysShort: '_ _ _ _ _ _'.split('_'),
        weekdaysMin: '_ _ _ _ _ _'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd,D MMMM YYYY LT',
        },
        meridiemParse: /                  |                  /,
        isPM: function (e) {
          return /                  /.test(e);
        },
        meridiem: function (e) {
          return 12 > e ? '' : '';
        },
        calendar: {
          sameDay: '[]LT',
          nextDay: '[]LT',
          nextWeek: 'dddd[]LT',
          lastDay: '[]LT',
          lastWeek: 'dddd[][]LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s',
          past: '%s',
          s: '',
          m: '',
          mm: '%d',
          h: '',
          hh: '%d',
          d: '',
          dd: '%d',
          M: '',
          MM: '%d',
          y: '',
          yy: '%d',
        },
        preparse: function (e) {
          return e
            .replace(/[  -  ]/g, function (e) {
              return a[e];
            })
            .replace(/  /g, ',');
        },
        postformat: function (e) {
          return e
            .replace(/\d/g, function (e) {
              return t[e];
            })
            .replace(/,/g, '');
        },
        ordinalParse: /\d{1,2}  /,
        ordinal: '%d',
        week: { dow: 6, doy: 12 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, n, s) {
        var r = '';
        switch (n) {
          case 's':
            return s ? 'muutaman sekunnin' : 'muutama sekunti';
          case 'm':
            return s ? 'minuutin' : 'minuutti';
          case 'mm':
            r = s ? 'minuutin' : 'minuuttia';
            break;
          case 'h':
            return s ? 'tunnin' : 'tunti';
          case 'hh':
            r = s ? 'tunnin' : 'tuntia';
            break;
          case 'd':
            return s ? 'p iv n' : 'p iv';
          case 'dd':
            r = s ? 'p iv n' : 'p iv';
            break;
          case 'M':
            return s ? 'kuukauden' : 'kuukausi';
          case 'MM':
            r = s ? 'kuukauden' : 'kuukautta';
            break;
          case 'y':
            return s ? 'vuoden' : 'vuosi';
          case 'yy':
            r = s ? 'vuoden' : 'vuotta';
        }
        return (r = a(e, s) + '' + r);
      }
      function a(e, t) {
        return 10 > e ? (t ? s[e] : n[e]) : e;
      }
      var n =
          'nolla yksi kaksi kolme nelj viisi kuusi seitsem n kahdeksan yhdeks n'.split(
            ''
          ),
        s = [
          'nolla',
          'yhden',
          'kahden',
          'kolmen',
          'nelj n',
          'viiden',
          'kuuden',
          n[7],
          n[8],
          n[9],
        ];
      return e.defineLocale('fi', {
        months:
          'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kes kuu_hein kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split(
            '_'
          ),
        monthsShort:
          'tammi_helmi_maalis_huhti_touko_kes _hein _elo_syys_loka_marras_joulu'.split(
            '_'
          ),
        weekdays:
          'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split(
            '_'
          ),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
          LT: 'HH.mm',
          LTS: 'HH.mm.ss',
          L: 'DD.MM.YYYY',
          LL: 'Do MMMM[ta]YYYY',
          LLL: 'Do MMMM[ta]YYYY,[klo]LT',
          LLLL: 'dddd,Do MMMM[ta]YYYY,[klo]LT',
          l: 'D.M.YYYY',
          ll: 'Do MMM YYYY',
          lll: 'Do MMM YYYY,[klo]LT',
          llll: 'ddd,Do MMM YYYY,[klo]LT',
        },
        calendar: {
          sameDay: '[t n n][klo]LT',
          nextDay: '[huomenna][klo]LT',
          nextWeek: 'dddd[klo]LT',
          lastDay: '[eilen][klo]LT',
          lastWeek: '[viime]dddd[na][klo]LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s p st',
          past: '%s sitten',
          s: t,
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('fo', {
        months:
          'januar_februar_mars_apr l_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
          ),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split(
          '_'
        ),
        weekdays:
          'sunnudagur_m nadagur_t sdagur_mikudagur_h sdagur_fr ggjadagur_leygardagur'.split(
            '_'
          ),
        weekdaysShort: 'sun_m n_t s_mik_h s_fr _ley'.split('_'),
        weekdaysMin: 'su_m _t _mi_h _fr_le'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D.MMMM,YYYY LT',
        },
        calendar: {
          sameDay: '[dag kl.]LT',
          nextDay: '[morgin kl.]LT',
          nextWeek: 'dddd[kl.]LT',
          lastDay: '[gj r kl.]LT',
          lastWeek: '[s stu]dddd[kl]LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'um%s',
          past: '%s s ani',
          s: 'f sekund',
          m: 'ein minutt',
          mm: '%d minuttir',
          h: 'ein t mi',
          hh: '%d t mar',
          d: 'ein dagur',
          dd: '%d dagar',
          M: 'ein m na i',
          MM: '%d m na ir',
          y: 'eitt r',
          yy: '%d r',
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('fr-ca', {
        months:
          'janvier_f vrier_mars_avril_mai_juin_juillet_ao t_septembre_octobre_novembre_d cembre'.split(
            '_'
          ),
        monthsShort:
          'janv._f vr._mars_avr._mai_juin_juil._ao t_sept._oct._nov._d c.'.split(
            '_'
          ),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split(
          '_'
        ),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'YYYY-MM-DD',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: "[Aujourd'hui   ] LT",
          nextDay: '[Demain   ] LT',
          nextWeek: 'dddd [  ] LT',
          lastDay: '[Hier   ] LT',
          lastWeek: 'dddd [dernier   ] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'dans %s',
          past: 'il y a %s',
          s: 'quelques secondes',
          m: 'une minute',
          mm: '%d minutes',
          h: 'une heure',
          hh: '%d heures',
          d: 'un jour',
          dd: '%d jours',
          M: 'un mois',
          MM: '%d mois',
          y: 'un an',
          yy: '%d ans',
        },
        ordinalParse: /\d{1,2}(er|)/,
        ordinal: function (e) {
          return e + (1 === e ? 'er' : '');
        },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('fr', {
        months:
          'janvier_f  vrier_mars_avril_mai_juin_juillet_ao  t_septembre_octobre_novembre_d  cembre'.split(
            '_'
          ),
        monthsShort:
          'janv._f  vr._mars_avr._mai_juin_juil._ao  t_sept._oct._nov._d  c.'.split(
            '_'
          ),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split(
          '_'
        ),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: "[Aujourd'hui]LT",
          nextDay: '[Demain]LT',
          nextWeek: 'dddd[]LT',
          lastDay: '[Hier]LT',
          lastWeek: 'dddd[dernier]LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'dans%s',
          past: 'il y a%s',
          s: 'quelques secondes',
          m: 'une minute',
          mm: '%d minutes',
          h: 'une heure',
          hh: '%d heures',
          d: 'un jour',
          dd: '%d jours',
          M: 'un mois',
          MM: '%d mois',
          y: 'un an',
          yy: '%d ans',
        },
        ordinalParse: /\d{1,2}(er|)/,
        ordinal: function (e) {
          return e + (1 === e ? 'er' : '');
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t =
          'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split(
            '_'
          ),
        a = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
      return e.defineLocale('fy', {
        months:
          'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split(
            '_'
          ),
        monthsShort: function (e, n) {
          return /-MMM-/.test(n) ? a[e.month()] : t[e.month()];
        },
        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split(
          '_'
        ),
        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD-MM-YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[hjoed om]LT',
          nextDay: '[moarn om]LT',
          nextWeek: 'dddd[om]LT',
          lastDay: '[juster om]LT',
          lastWeek: '[fr ne]dddd[om]LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'oer%s',
          past: '%s lyn',
          s: 'in pear sekonden',
          m: 'ien min t',
          mm: '%d minuten',
          h: 'ien oere',
          hh: '%d oeren',
          d: 'ien dei',
          dd: '%d dagen',
          M: 'ien moanne',
          MM: '%d moannen',
          y: 'ien jier',
          yy: '%d jierren',
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (e) {
          return e + (1 === e || 8 === e || e >= 20 ? 'ste' : 'de');
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('gl', {
        months:
          'Xaneiro_Febreiro_Marzo_Abril_Maio_Xu o_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split(
            '_'
          ),
        monthsShort:
          'Xan._Feb._Mar._Abr._Mai._Xu._Xul._Ago._Set._Out._Nov._Dec.'.split(
            '_'
          ),
        weekdays: 'Domingo_Luns_Martes_M rcores_Xoves_Venres_S bado'.split('_'),
        weekdaysShort: 'Dom._Lun._Mar._M r._Xov._Ven._S b.'.split('_'),
        weekdaysMin: 'Do_Lu_Ma_M _Xo_Ve_S'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: function () {
            return '[hoxe' + (1 !== this.hours() ? 's' : '') + ']LT';
          },
          nextDay: function () {
            return '[ma' + (1 !== this.hours() ? 's' : '') + ']LT';
          },
          nextWeek: function () {
            return 'dddd[' + (1 !== this.hours() ? 's' : 'a') + ']LT';
          },
          lastDay: function () {
            return '[onte' + (1 !== this.hours() ? '' : 'a') + ']LT';
          },
          lastWeek: function () {
            return '[o]dddd[pasado' + (1 !== this.hours() ? 's' : 'a') + ']LT';
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: function (e) {
            return 'uns segundos' === e ? 'nuns segundos' : 'en' + e;
          },
          past: 'hai%s',
          s: 'uns segundos',
          m: 'un minuto',
          mm: '%d minutos',
          h: 'unha hora',
          hh: '%d horas',
          d: 'un d a',
          dd: '%d d as',
          M: 'un mes',
          MM: '%d meses',
          y: 'un ano',
          yy: '%d anos',
        },
        ordinalParse: /\d{1,2}  /,
        ordinal: '%d',
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('he', {
        months: '_ _ _ _ _ _ _ _ _ _ _'.split('_'),
        monthsShort: '_ _ _ _ _ _ _ _ _ _ _'.split('_'),
        weekdays: '_ _ _ _ _ _'.split('_'),
        weekdaysShort: '_ _ _ _ _ _'.split('_'),
        weekdaysMin: '_ _ _ _ _ _'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D[]MMMM YYYY',
          LLL: 'D[]MMMM YYYY LT',
          LLLL: 'dddd,D[]MMMM YYYY LT',
          l: 'D/M/YYYY',
          ll: 'D MMM YYYY',
          lll: 'D MMM YYYY LT',
          llll: 'ddd,D MMM YYYY LT',
        },
        calendar: {
          sameDay: '[]LT',
          nextDay: '[]LT',
          nextWeek: 'dddd[]LT',
          lastDay: '[]LT',
          lastWeek: '[]dddd[]LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s',
          past: '%s',
          s: '',
          m: '',
          mm: '%d',
          h: '',
          hh: function (e) {
            return 2 === e ? '' : e + '';
          },
          d: '',
          dd: function (e) {
            return 2 === e ? '' : e + '';
          },
          M: '',
          MM: function (e) {
            return 2 === e ? '' : e + '';
          },
          y: '',
          yy: function (e) {
            return 2 === e ? '' : e % 10 === 0 && 10 !== e ? e + '' : e + '';
          },
        },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
          1: '',
          2: '',
          3: '',
          4: '',
          5: '',
          6: '',
          7: '',
          8: '',
          9: '',
          0: '',
        },
        a = {
          '': '1',
          '': '2',
          '': '3',
          '': '4',
          '': '5',
          '': '6',
          '': '7',
          '': '8',
          '': '9',
          '': '0',
        };
      return e.defineLocale('hi', {
        months: '_ _ _ _ _ _ _ _ _ _ _'.split('_'),
        monthsShort: '._._ _._ _ _._._._._._.'.split('_'),
        weekdays: '_ _ _ _ _ _'.split('_'),
        weekdaysShort: '_ _ _ _ _ _'.split('_'),
        weekdaysMin: '_ _ _ _ _ _'.split('_'),
        longDateFormat: {
          LT: 'A h:mm',
          LTS: 'A h:mm:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY,LT',
          LLLL: 'dddd,D MMMM YYYY,LT',
        },
        calendar: {
          sameDay: '[]LT',
          nextDay: '[]LT',
          nextWeek: 'dddd,LT',
          lastDay: '[]LT',
          lastWeek: '[]dddd,LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s',
          past: '%s',
          s: '',
          m: '',
          mm: '%d',
          h: '',
          hh: '%d',
          d: '',
          dd: '%d',
          M: '',
          MM: '%d',
          y: '',
          yy: '%d',
        },
        preparse: function (e) {
          return e.replace(/[                              ]/g, function (e) {
            return a[e];
          });
        },
        postformat: function (e) {
          return e.replace(/\d/g, function (e) {
            return t[e];
          });
        },
        meridiemParse: /         |            |               |         /,
        meridiemHour: function (e, t) {
          return (
            12 === e && (e = 0),
            '' === t
              ? 4 > e
                ? e
                : e + 12
              : '' === t
                ? e
                : '' === t
                  ? e >= 10
                    ? e
                    : e + 12
                  : '' === t
                    ? e + 12
                    : void 0
          );
        },
        meridiem: function (e) {
          return 4 > e ? '' : 10 > e ? '' : 17 > e ? '' : 20 > e ? '' : '';
        },
        week: { dow: 0, doy: 6 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a) {
        var n = e + '';
        switch (a) {
          case 'm':
            return t ? 'jedna minuta' : 'jedne minute';
          case 'mm':
            return (n +=
              1 === e
                ? 'minuta'
                : 2 === e || 3 === e || 4 === e
                  ? 'minute'
                  : 'minuta');
          case 'h':
            return t ? 'jedan sat' : 'jednog sata';
          case 'hh':
            return (n +=
              1 === e
                ? 'sat'
                : 2 === e || 3 === e || 4 === e
                  ? 'sata'
                  : 'sati');
          case 'dd':
            return (n += 1 === e ? 'dan' : 'dana');
          case 'MM':
            return (n +=
              1 === e
                ? 'mjesec'
                : 2 === e || 3 === e || 4 === e
                  ? 'mjeseca'
                  : 'mjeseci');
          case 'yy':
            return (n +=
              1 === e
                ? 'godina'
                : 2 === e || 3 === e || 4 === e
                  ? 'godine'
                  : 'godina');
        }
      }
      return e.defineLocale('hr', {
        months:
          'sje anj_velja a_o ujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split(
            '_'
          ),
        monthsShort:
          'sje._vel._o u._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split(
            '_'
          ),
        weekdays:
          'nedjelja_ponedjeljak_utorak_srijeda_ etvrtak_petak_subota'.split(
            '_'
          ),
        weekdaysShort: 'ned._pon._uto._sri._ et._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_ e_pe_su'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D.MMMM YYYY',
          LLL: 'D.MMMM YYYY LT',
          LLLL: 'dddd,D.MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[danas u]LT',
          nextDay: '[sutra u]LT',
          nextWeek: function () {
            switch (this.day()) {
              case 0:
                return '[u][nedjelju][u]LT';
              case 3:
                return '[u][srijedu][u]LT';
              case 6:
                return '[u][subotu][u]LT';
              case 1:
              case 2:
              case 4:
              case 5:
                return '[u]dddd[u]LT';
            }
          },
          lastDay: '[ju er u]LT',
          lastWeek: function () {
            switch (this.day()) {
              case 0:
              case 3:
                return '[pro lu]dddd[u]LT';
              case 6:
                return '[pro le][subote][u]LT';
              case 1:
              case 2:
              case 4:
              case 5:
                return '[pro li]dddd[u]LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: 'za%s',
          past: 'prije%s',
          s: 'par sekundi',
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: 'dan',
          dd: t,
          M: 'mjesec',
          MM: t,
          y: 'godinu',
          yy: t,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a, n) {
        var s = e;
        switch (a) {
          case 's':
            return n || t ? 'n h ny m sodperc' : 'n h ny m sodperce';
          case 'm':
            return 'egy' + (n || t ? 'perc' : 'perce');
          case 'mm':
            return s + (n || t ? 'perc' : 'perce');
          case 'h':
            return 'egy' + (n || t ? 'ra' : 'r ja');
          case 'hh':
            return s + (n || t ? 'ra' : 'r ja');
          case 'd':
            return 'egy' + (n || t ? 'nap' : 'napja');
          case 'dd':
            return s + (n || t ? 'nap' : 'napja');
          case 'M':
            return 'egy' + (n || t ? 'h nap' : 'h napja');
          case 'MM':
            return s + (n || t ? 'h nap' : 'h napja');
          case 'y':
            return 'egy' + (n || t ? 'v' : 've');
          case 'yy':
            return s + (n || t ? 'v' : 've');
        }
        return '';
      }
      function a(e) {
        return (e ? '' : '[m lt]') + '[' + n[this.day()] + ']LT[-kor]';
      }
      var n =
        'vas rnap h tf n kedden szerd n cs t rt k n p nteken szombaton'.split(
          ''
        );
      return e.defineLocale('hu', {
        months:
          'janu r_febru r_m rcius_ prilis_m jus_j nius_j lius_augusztus_szeptember_okt ber_november_december'.split(
            '_'
          ),
        monthsShort: 'jan_feb_m rc_ pr_m j_j n_j l_aug_szept_okt_nov_dec'.split(
          '_'
        ),
        weekdays: 'vas rnap_h tf _kedd_szerda_cs t rt k_p ntek_szombat'.split(
          '_'
        ),
        weekdaysShort: 'vas_h t_kedd_sze_cs t_p n_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'YYYY.MM.DD.',
          LL: 'YYYY.MMMM D.',
          LLL: 'YYYY.MMMM D.,LT',
          LLLL: 'YYYY.MMMM D.,dddd LT',
        },
        meridiemParse: /de|du/i,
        isPM: function (e) {
          return 'u' === e.charAt(1).toLowerCase();
        },
        meridiem: function (e, t, a) {
          return 12 > e ? (a === !0 ? 'de' : 'DE') : a === !0 ? 'du' : 'DU';
        },
        calendar: {
          sameDay: '[ma]LT[-kor]',
          nextDay: '[holnap]LT[-kor]',
          nextWeek: function () {
            return a.call(this, !0);
          },
          lastDay: '[tegnap]LT[-kor]',
          lastWeek: function () {
            return a.call(this, !1);
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s m lva',
          past: '%s',
          s: t,
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t) {
        var a = {
            nominative: '_ _ _ _ _ _ _ _ _ _ _'.split('_'),
            accusative: '_ _ _ _ _ _ _ _ _ _ _'.split('_'),
          },
          n = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(t)
            ? 'accusative'
            : 'nominative';
        return a[n][e.month()];
      }
      function a(e) {
        var t = '_ _ _ _ _ _ _ _ _ _ _'.split('_');
        return t[e.month()];
      }
      function n(e) {
        var t = '_ _ _ _ _ _'.split('_');
        return t[e.day()];
      }
      return e.defineLocale('hy-am', {
        months: t,
        monthsShort: a,
        weekdays: n,
        weekdaysShort: '_ _ _ _ _ _'.split('_'),
        weekdaysMin: '_ _ _ _ _ _'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY.',
          LLL: 'D MMMM YYYY.,LT',
          LLLL: 'dddd,D MMMM YYYY.,LT',
        },
        calendar: {
          sameDay: '[]LT',
          nextDay: '[]LT',
          lastDay: '[]LT',
          nextWeek: function () {
            return 'dddd[]LT';
          },
          lastWeek: function () {
            return '[]dddd[]LT';
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s',
          past: '%s',
          s: '',
          m: '',
          mm: '%d',
          h: '',
          hh: '%d',
          d: '',
          dd: '%d',
          M: '',
          MM: '%d',
          y: '',
          yy: '%d',
        },
        meridiemParse:
          /              |                |              |                /,
        isPM: function (e) {
          return /^(              |                )$/.test(e);
        },
        meridiem: function (e) {
          return 4 > e ? '' : 12 > e ? '' : 17 > e ? '' : '';
        },
        ordinalParse: /\d{1,2}|\d{1,2}-(    |    )/,
        ordinal: function (e, t) {
          switch (t) {
            case 'DDD':
            case 'w':
            case 'W':
            case 'DDDo':
              return 1 === e ? e + '-' : e + '-';
            default:
              return e;
          }
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('id', {
        months:
          'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split(
            '_'
          ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split(
          '_'
        ),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
          LT: 'HH.mm',
          LTS: 'LT.ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY[pukul]LT',
          LLLL: 'dddd,D MMMM YYYY[pukul]LT',
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function (e, t) {
          return (
            12 === e && (e = 0),
            'pagi' === t
              ? e
              : 'siang' === t
                ? e >= 11
                  ? e
                  : e + 12
                : 'sore' === t || 'malam' === t
                  ? e + 12
                  : void 0
          );
        },
        meridiem: function (e) {
          return 11 > e ? 'pagi' : 15 > e ? 'siang' : 19 > e ? 'sore' : 'malam';
        },
        calendar: {
          sameDay: '[Hari ini pukul]LT',
          nextDay: '[Besok pukul]LT',
          nextWeek: 'dddd[pukul]LT',
          lastDay: '[Kemarin pukul]LT',
          lastWeek: 'dddd[lalu pukul]LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'dalam%s',
          past: '%s yang lalu',
          s: 'beberapa detik',
          m: 'semenit',
          mm: '%d menit',
          h: 'sejam',
          hh: '%d jam',
          d: 'sehari',
          dd: '%d hari',
          M: 'sebulan',
          MM: '%d bulan',
          y: 'setahun',
          yy: '%d tahun',
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e) {
        return e % 100 === 11 ? !0 : e % 10 === 1 ? !1 : !0;
      }
      function a(e, a, n, s) {
        var r = e + '';
        switch (n) {
          case 's':
            return a || s ? 'nokkrar sek ndur' : 'nokkrum sek ndum';
          case 'm':
            return a ? 'm n ta' : 'm n tu';
          case 'mm':
            return t(e)
              ? r + (a || s ? 'm n tur' : 'm n tum')
              : a
                ? r + 'm n ta'
                : r + 'm n tu';
          case 'hh':
            return t(e)
              ? r + (a || s ? 'klukkustundir' : 'klukkustundum')
              : r + 'klukkustund';
          case 'd':
            return a ? 'dagur' : s ? 'dag' : 'degi';
          case 'dd':
            return t(e)
              ? a
                ? r + 'dagar'
                : r + (s ? 'daga' : 'd gum')
              : a
                ? r + 'dagur'
                : r + (s ? 'dag' : 'degi');
          case 'M':
            return a ? 'm nu ur' : s ? 'm nu' : 'm nu i';
          case 'MM':
            return t(e)
              ? a
                ? r + 'm nu ir'
                : r + (s ? 'm nu i' : 'm nu um')
              : a
                ? r + 'm nu ur'
                : r + (s ? 'm nu' : 'm nu i');
          case 'y':
            return a || s ? 'r' : 'ri';
          case 'yy':
            return t(e)
              ? r + (a || s ? 'r' : 'rum')
              : r + (a || s ? 'r' : 'ri');
        }
      }
      return e.defineLocale('is', {
        months:
          'jan ar_febr ar_mars_apr l_ma _j n _j l _ g st_september_okt ber_n vember_desember'.split(
            '_'
          ),
        monthsShort: 'jan_feb_mar_apr_ma _j n_j l_ g _sep_okt_n v_des'.split(
          '_'
        ),
        weekdays:
          'sunnudagur_m nudagur_ ri judagur_mi vikudagur_fimmtudagur_f studagur_laugardagur'.split(
            '_'
          ),
        weekdaysShort: 'sun_m n_ ri_mi _fim_f s_lau'.split('_'),
        weekdaysMin: 'Su_M _ r_Mi_Fi_F _La'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D.MMMM YYYY',
          LLL: 'D.MMMM YYYY[kl.]LT',
          LLLL: 'dddd,D.MMMM YYYY[kl.]LT',
        },
        calendar: {
          sameDay: '[dag kl.]LT',
          nextDay: '[morgun kl.]LT',
          nextWeek: 'dddd[kl.]LT',
          lastDay: '[g r kl.]LT',
          lastWeek: '[s asta]dddd[kl.]LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'eftir%s',
          past: 'fyrir%s s an',
          s: a,
          m: a,
          mm: a,
          h: 'klukkustund',
          hh: a,
          d: a,
          dd: a,
          M: a,
          MM: a,
          y: a,
          yy: a,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('it', {
        months:
          'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
          ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split(
          '_'
        ),
        weekdays:
          'Domenica_Luned _Marted _Mercoled _Gioved _Venerd _Sabato'.split('_'),
        weekdaysShort: 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
        weekdaysMin: 'D_L_Ma_Me_G_V_S'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd,D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Oggi alle]LT',
          nextDay: '[Domani alle]LT',
          nextWeek: 'dddd[alle]LT',
          lastDay: '[Ieri alle]LT',
          lastWeek: function () {
            switch (this.day()) {
              case 0:
                return '[la scorsa]dddd[alle]LT';
              default:
                return '[lo scorso]dddd[alle]LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: function (e) {
            return (/^[0-9].+$/.test(e) ? 'tra' : 'in') + '' + e;
          },
          past: '%s fa',
          s: 'alcuni secondi',
          m: 'un minuto',
          mm: '%d minuti',
          h: "un'ora",
          hh: '%d ore',
          d: 'un giorno',
          dd: '%d giorni',
          M: 'un mese',
          MM: '%d mesi',
          y: 'un anno',
          yy: '%d anni',
        },
        ordinalParse: /\d{1,2}  /,
        ordinal: '%d  ',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('ja', {
        months:
          '1   _2   _3   _4   _5   _6   _7   _8   _9   _10   _11   _12   '.split(
            '_'
          ),
        monthsShort:
          '1   _2   _3   _4   _5   _6   _7   _8   _9   _10   _11   _12   '.split(
            '_'
          ),
        weekdays:
          '         _         _         _         _         _         _         '.split(
            '_'
          ),
        weekdaysShort: '   _   _   _   _   _   _   '.split('_'),
        weekdaysMin: '   _   _   _   _   _   _   '.split('_'),
        longDateFormat: {
          LT: 'Ah   m   ',
          LTS: 'LTs   ',
          L: 'YYYY/MM/DD',
          LL: 'YYYY   M   D   ',
          LLL: 'YYYY   M   D   LT',
          LLLL: 'YYYY   M   D   LT dddd',
        },
        meridiemParse: /      |      /i,
        isPM: function (e) {
          return '      ' === e;
        },
        meridiem: function (e) {
          return 12 > e ? '      ' : '      ';
        },
        calendar: {
          sameDay: '[      ] LT',
          nextDay: '[      ] LT',
          nextWeek: '[      ]dddd LT',
          lastDay: '[      ] LT',
          lastWeek: '[      ]dddd LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s   ',
          past: '%s   ',
          s: '      ',
          m: '1   ',
          mm: '%d   ',
          h: '1      ',
          hh: '%d      ',
          d: '1   ',
          dd: '%d   ',
          M: '1      ',
          MM: '%d      ',
          y: '1   ',
          yy: '%d   ',
        },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t) {
        var a = {
            nominative:
              '                     _                           _               _                  _               _                  _                  _                     _                              _                           _                        _                           '.split(
                '_'
              ),
            accusative:
              '                     _                           _               _                     _               _                  _                  _                     _                              _                           _                        _                           '.split(
                '_'
              ),
          },
          n = /D[oD] *MMMM?/.test(t) ? 'accusative' : 'nominative';
        return a[n][e.month()];
      }
      function a(e, t) {
        var a = {
            nominative:
              '               _                        _                           _                           _                           _                           _                  '.split(
                '_'
              ),
            accusative:
              '                  _                        _                           _                           _                           _                           _                  '.split(
                '_'
              ),
          },
          n = /(            |                  )/.test(t)
            ? 'accusative'
            : 'nominative';
        return a[n][e.day()];
      }
      return e.defineLocale('ka', {
        months: t,
        monthsShort:
          '         _         _         _         _         _         _         _         _         _         _         _         '.split(
            '_'
          ),
        weekdays: a,
        weekdaysShort:
          '         _         _         _         _         _         _         '.split(
            '_'
          ),
        weekdaysMin: '      _      _      _      _      _      _      '.split(
          '_'
        ),
        longDateFormat: {
          LT: 'h:mm A',
          LTS: 'h:mm:ss A',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[            ] LT[-      ]',
          nextDay: '[            ] LT[-      ]',
          lastDay: '[               ] LT[-      ]',
          nextWeek: '[                  ] dddd LT[-      ]',
          lastWeek: '[            ] dddd LT-      ',
          sameElse: 'L',
        },
        relativeTime: {
          future: function (e) {
            return /(            |            |               |            )/.test(
              e
            )
              ? e.replace(/   $/, '      ')
              : e + '      ';
          },
          past: function (e) {
            return /(            |            |               |         |         )/.test(
              e
            )
              ? e.replace(/(   |   )$/, '                ')
              : /            /.test(e)
                ? e.replace(/            $/, '                      ')
                : void 0;
          },
          s: '                                        ',
          m: '            ',
          mm: '%d             ',
          h: '               ',
          hh: '%d                ',
          d: '         ',
          dd: '%d          ',
          M: '         ',
          MM: '%d          ',
          y: '            ',
          yy: '%d             ',
        },
        ordinalParse: /0|1-      |      -\d{1,2}|\d{1,2}-   /,
        ordinal: function (e) {
          return 0 === e
            ? e
            : 1 === e
              ? e + '-      '
              : 20 > e || (100 >= e && e % 20 === 0) || e % 100 === 0
                ? '      -' + e
                : e + '-   ';
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('km', {
        months:
          '            _                  _            _            _            _                  _                  _            _               _            _                        _            '.split(
            '_'
          ),
        monthsShort:
          '            _                  _            _            _            _                  _                  _            _               _            _                        _            '.split(
            '_'
          ),
        weekdays:
          '                     _               _                  _         _                              _               _            '.split(
            '_'
          ),
        weekdaysShort:
          '                     _               _                  _         _                              _               _            '.split(
            '_'
          ),
        weekdaysMin:
          '                     _               _                  _         _                              _               _            '.split(
            '_'
          ),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[                               ] LT',
          nextDay: '[                            ] LT',
          nextWeek: 'dddd [            ] LT',
          lastDay: '[                                     ] LT',
          lastWeek: 'dddd [                              ] [            ] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s         ',
          past: '%s         ',
          s: '                                          ',
          m: '                     ',
          mm: '%d             ',
          h: '                     ',
          hh: '%d             ',
          d: '                     ',
          dd: '%d             ',
          M: '               ',
          MM: '%d       ',
          y: '                        ',
          yy: '%d                ',
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('ko', {
        months:
          '1   _2   _3   _4   _5   _6   _7   _8   _9   _10   _11   _12   '.split(
            '_'
          ),
        monthsShort:
          '1   _2   _3   _4   _5   _6   _7   _8   _9   _10   _11   _12   '.split(
            '_'
          ),
        weekdays:
          '         _         _         _         _         _         _         '.split(
            '_'
          ),
        weekdaysShort: '   _   _   _   _   _   _   '.split('_'),
        weekdaysMin: '   _   _   _   _   _   _   '.split('_'),
        longDateFormat: {
          LT: 'A h    m   ',
          LTS: 'A h    m    s   ',
          L: 'YYYY.MM.DD',
          LL: 'YYYY    MMMM D   ',
          LLL: 'YYYY    MMMM D    LT',
          LLLL: 'YYYY    MMMM D    dddd LT',
        },
        calendar: {
          sameDay: '       LT',
          nextDay: '       LT',
          nextWeek: 'dddd LT',
          lastDay: '       LT',
          lastWeek: '          dddd LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s    ',
          past: '%s    ',
          s: '      ',
          ss: '%d   ',
          m: '      ',
          mm: '%d   ',
          h: '         ',
          hh: '%d      ',
          d: '      ',
          dd: '%d   ',
          M: '      ',
          MM: '%d   ',
          y: '      ',
          yy: '%d   ',
        },
        ordinalParse: /\d{1,2}   /,
        ordinal: '%d   ',
        meridiemParse: /      |      /,
        isPM: function (e) {
          return '      ' === e;
        },
        meridiem: function (e) {
          return 12 > e ? '      ' : '      ';
        },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a) {
        var n = {
          m: ['eng Minutt', 'enger Minutt'],
          h: ['eng Stonn', 'enger Stonn'],
          d: ['een Dag', 'engem Dag'],
          M: ['ee Mount', 'engem Mount'],
          y: ['ee Joer', 'engem Joer'],
        };
        return t ? n[a][0] : n[a][1];
      }
      function a(e) {
        var t = e.substr(0, e.indexOf(' '));
        return s(t) ? 'a ' + e : 'an ' + e;
      }
      function n(e) {
        var t = e.substr(0, e.indexOf(' '));
        return s(t) ? 'viru ' + e : 'virun ' + e;
      }
      function s(e) {
        if (((e = parseInt(e, 10)), isNaN(e))) return !1;
        if (0 > e) return !0;
        if (10 > e) return e >= 4 && 7 >= e ? !0 : !1;
        if (100 > e) {
          var t = e % 10,
            a = e / 10;
          return s(0 === t ? a : t);
        }
        if (1e4 > e) {
          for (; e >= 10; ) e /= 10;
          return s(e);
        }
        return (e /= 1e3), s(e);
      }
      return e.defineLocale('lb', {
        months:
          'Januar_Februar_M  erz_Abr  ll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
          ),
        monthsShort:
          'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split(
            '_'
          ),
        weekdays:
          'Sonndeg_M  indeg_D  nschdeg_M  ttwoch_Donneschdeg_Freideg_Samschdeg'.split(
            '_'
          ),
        weekdaysShort: 'So._M  ._D  ._M  ._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_M  _D  _M  _Do_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'H:mm [Auer]',
          LTS: 'H:mm:ss [Auer]',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Haut um] LT',
          sameElse: 'L',
          nextDay: '[Muer um] LT',
          nextWeek: 'dddd [um] LT',
          lastDay: '[G  schter um] LT',
          lastWeek: function () {
            switch (this.day()) {
              case 2:
              case 4:
                return '[Leschten] dddd [um] LT';
              default:
                return '[Leschte] dddd [um] LT';
            }
          },
        },
        relativeTime: {
          future: a,
          past: n,
          s: 'e puer Sekonnen',
          m: t,
          mm: '%d Minutten',
          h: t,
          hh: '%d Stonnen',
          d: t,
          dd: '%d Deeg',
          M: t,
          MM: '%d M  int',
          y: t,
          yy: '%d Joer',
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a, n) {
        return t
          ? 'kelios sekund  s'
          : n
            ? 'keli   sekund  i  '
            : 'kelias sekundes';
      }
      function a(e, t, a, n) {
        return t ? s(a)[0] : n ? s(a)[1] : s(a)[2];
      }
      function n(e) {
        return e % 10 === 0 || (e > 10 && 20 > e);
      }
      function s(e) {
        return d[e].split('_');
      }
      function r(e, t, r, _) {
        var d = e + ' ';
        return 1 === e
          ? d + a(e, t, r[0], _)
          : t
            ? d + (n(e) ? s(r)[1] : s(r)[0])
            : _
              ? d + s(r)[1]
              : d + (n(e) ? s(r)[1] : s(r)[2]);
      }
      function _(e, t) {
        var a = -1 === t.indexOf('dddd HH:mm'),
          n = i[e.day()];
        return a ? n : n.substring(0, n.length - 2) + '  ';
      }
      var d = {
          m: 'minut  _minut  s_minut  ',
          mm: 'minut  s_minu  i  _minutes',
          h: 'valanda_valandos_valand  ',
          hh: 'valandos_valand  _valandas',
          d: 'diena_dienos_dien  ',
          dd: 'dienos_dien  _dienas',
          M: 'm  nuo_m  nesio_m  nes  ',
          MM: 'm  nesiai_m  nesi  _m  nesius',
          y: 'metai_met  _metus',
          yy: 'metai_met  _metus',
        },
        i =
          'sekmadienis_pirmadienis_antradienis_tre  iadienis_ketvirtadienis_penktadienis_  e  tadienis'.split(
            '_'
          );
      return e.defineLocale('lt', {
        months:
          'sausio_vasario_kovo_baland  io_gegu    s_bir  elio_liepos_rugpj    io_rugs  jo_spalio_lapkri  io_gruod  io'.split(
            '_'
          ),
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split(
          '_'
        ),
        weekdays: _,
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_  e  '.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_  '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'YYYY-MM-DD',
          LL: 'YYYY [m.] MMMM D [d.]',
          LLL: 'YYYY [m.] MMMM D [d.], LT [val.]',
          LLLL: 'YYYY [m.] MMMM D [d.], dddd, LT [val.]',
          l: 'YYYY-MM-DD',
          ll: 'YYYY [m.] MMMM D [d.]',
          lll: 'YYYY [m.] MMMM D [d.], LT [val.]',
          llll: 'YYYY [m.] MMMM D [d.], ddd, LT [val.]',
        },
        calendar: {
          sameDay: '[  iandien] LT',
          nextDay: '[Rytoj] LT',
          nextWeek: 'dddd LT',
          lastDay: '[Vakar] LT',
          lastWeek: '[Pra  jus  ] dddd LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'po %s',
          past: 'prie   %s',
          s: t,
          m: a,
          mm: r,
          h: a,
          hh: r,
          d: a,
          dd: r,
          M: a,
          MM: r,
          y: a,
          yy: r,
        },
        ordinalParse: /\d{1,2}-oji/,
        ordinal: function (e) {
          return e + '-oji';
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a) {
        var n = e.split('_');
        return a
          ? t % 10 === 1 && 11 !== t
            ? n[2]
            : n[3]
          : t % 10 === 1 && 11 !== t
            ? n[0]
            : n[1];
      }
      function a(e, a, s) {
        return e + ' ' + t(n[s], e, a);
      }
      var n = {
        mm: 'min  ti_min  tes_min  te_min  tes',
        hh: 'stundu_stundas_stunda_stundas',
        dd: 'dienu_dienas_diena_dienas',
        MM: 'm  nesi_m  ne  us_m  nesis_m  ne  i',
        yy: 'gadu_gadus_gads_gadi',
      };
      return e.defineLocale('lv', {
        months:
          'janv  ris_febru  ris_marts_apr  lis_maijs_j  nijs_j  lijs_augusts_septembris_oktobris_novembris_decembris'.split(
            '_'
          ),
        monthsShort: 'jan_feb_mar_apr_mai_j  n_j  l_aug_sep_okt_nov_dec'.split(
          '_'
        ),
        weekdays:
          'sv  tdiena_pirmdiena_otrdiena_tre  diena_ceturtdiena_piektdiena_sestdiena'.split(
            '_'
          ),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'YYYY. [gada] D. MMMM',
          LLL: 'YYYY. [gada] D. MMMM, LT',
          LLLL: 'YYYY. [gada] D. MMMM, dddd, LT',
        },
        calendar: {
          sameDay: '[  odien pulksten] LT',
          nextDay: '[R  t pulksten] LT',
          nextWeek: 'dddd [pulksten] LT',
          lastDay: '[Vakar pulksten] LT',
          lastWeek: '[Pag  ju    ] dddd [pulksten] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s v  l  k',
          past: '%s agr  k',
          s: 'da  as sekundes',
          m: 'min  ti',
          mm: a,
          h: 'stundu',
          hh: a,
          d: 'dienu',
          dd: a,
          M: 'm  nesi',
          MM: a,
          y: 'gadu',
          yy: a,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('mk', {
        months:
          '              _                _        _          _      _        _        _            _                  _                _              _                '.split(
            '_'
          ),
        monthsShort:
          '      _      _      _      _      _      _      _      _      _      _      _      '.split(
            '_'
          ),
        weekdays:
          '            _                    _              _          _                _          _            '.split(
            '_'
          ),
        weekdaysShort: '      _      _      _      _      _      _      '.split(
          '_'
        ),
        weekdaysMin: '  e_  o_    _    _    _    _  a'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'D.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[               ] LT',
          nextDay: '[             ] LT',
          nextWeek: 'dddd [    ] LT',
          lastDay: '[               ] LT',
          lastWeek: function () {
            switch (this.day()) {
              case 0:
              case 3:
              case 6:
                return '[                         ] dddd [    ] LT';
              case 1:
              case 2:
              case 4:
              case 5:
                return '[                         ] dddd [    ] LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: '           %s',
          past: '         %s',
          s: '                             ',
          m: '            ',
          mm: '%d             ',
          h: '      ',
          hh: '%d         ',
          d: '      ',
          dd: '%d         ',
          M: '          ',
          MM: '%d             ',
          y: '            ',
          yy: '%d             ',
        },
        ordinalParse: /\d{1,2}-(    |    |    |    |    |    )/,
        ordinal: function (e) {
          var t = e % 10,
            a = e % 100;
          return 0 === e
            ? e + '-    '
            : 0 === a
              ? e + '-    '
              : a > 10 && 20 > a
                ? e + '-    '
                : 1 === t
                  ? e + '-    '
                  : 2 === t
                    ? e + '-    '
                    : 7 === t || 8 === t
                      ? e + '-    '
                      : e + '-    ';
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('ml', {
        months:
          '                  _                           _                     _                  _            _         _            _                        _                              _                     _               _                  '.split(
            '_'
          ),
        monthsShort:
          '         ._                  ._         ._               ._            _         _            ._      ._                     ._               ._         ._            .'.split(
            '_'
          ),
        weekdays:
          '                        _                              _                           _                        _                           _                                 _                        '.split(
            '_'
          ),
        weekdaysShort:
          '            _                  _               _            _                  _                  _         '.split(
            '_'
          ),
        weekdaysMin:
          '      _      _      _      _            _      _   '.split('_'),
        longDateFormat: {
          LT: 'A h:mm -      ',
          LTS: 'A h:mm:ss -      ',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT',
        },
        calendar: {
          sameDay: '[               ] LT',
          nextDay: '[            ] LT',
          nextWeek: 'dddd, LT',
          lastDay: '[                  ] LT',
          lastWeek: '[                  ] dddd, LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s                      ',
          past: '%s                ',
          s: '                                     ',
          m: '                                  ',
          mm: '%d                         ',
          h: '                                  ',
          hh: '%d                         ',
          d: '                         ',
          dd: '%d                ',
          M: '                      ',
          MM: '%d             ',
          y: '                      ',
          yy: '%d             ',
        },
        meridiemParse:
          /                  |                  |                                  |                              |                  /i,
        isPM: function (e) {
          return /^(                                  |                              |                  )$/.test(
            e
          );
        },
        meridiem: function (e) {
          return 4 > e
            ? '                  '
            : 12 > e
              ? '                  '
              : 17 > e
                ? '                                  '
                : 20 > e
                  ? '                              '
                  : '                  ';
        },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
          1: '   ',
          2: '   ',
          3: '   ',
          4: '   ',
          5: '   ',
          6: '   ',
          7: '   ',
          8: '   ',
          9: '   ',
          0: '   ',
        },
        a = {
          '   ': '1',
          '   ': '2',
          '   ': '3',
          '   ': '4',
          '   ': '5',
          '   ': '6',
          '   ': '7',
          '   ': '8',
          '   ': '9',
          '   ': '0',
        };
      return e.defineLocale('mr', {
        months:
          '                        _                              _               _                  _      _         _            _               _                        _                     _                           _                     '.split(
            '_'
          ),
        monthsShort:
          '            ._                  ._               ._               ._      ._         ._            ._      ._                  ._               ._                     ._               .'.split(
            '_'
          ),
        weekdays:
          '                  _                  _                     _                  _                     _                        _                  '.split(
            '_'
          ),
        weekdaysShort:
          '         _         _            _         _            _               _         '.split(
            '_'
          ),
        weekdaysMin: '   _      _      _      _      _      _   '.split('_'),
        longDateFormat: {
          LT: 'A h:mm                ',
          LTS: 'A h:mm:ss                ',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT',
        },
        calendar: {
          sameDay: '[      ] LT',
          nextDay: '[               ] LT',
          nextWeek: 'dddd, LT',
          lastDay: '[         ] LT',
          lastWeek: '[               ] dddd, LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s             ',
          past: '%s                   ',
          s: '               ',
          m: '                      ',
          mm: '%d                   ',
          h: '                ',
          hh: '%d          ',
          d: '                   ',
          dd: '%d             ',
          M: '                      ',
          MM: '%d                ',
          y: '                   ',
          yy: '%d                ',
        },
        preparse: function (e) {
          return e.replace(/[                              ]/g, function (e) {
            return a[e];
          });
        },
        postformat: function (e) {
          return e.replace(/\d/g, function (e) {
            return t[e];
          });
        },
        meridiemParse:
          /                  |               |                  |                        /,
        meridiemHour: function (e, t) {
          return (
            12 === e && (e = 0),
            '                  ' === t
              ? 4 > e
                ? e
                : e + 12
              : '               ' === t
                ? e
                : '                  ' === t
                  ? e >= 10
                    ? e
                    : e + 12
                  : '                        ' === t
                    ? e + 12
                    : void 0
          );
        },
        meridiem: function (e) {
          return 4 > e
            ? '                  '
            : 10 > e
              ? '               '
              : 17 > e
                ? '                  '
                : 20 > e
                  ? '                        '
                  : '                  ';
        },
        week: { dow: 0, doy: 6 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('ms-my', {
        months:
          'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
          ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split(
          '_'
        ),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
          LT: 'HH.mm',
          LTS: 'LT.ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY [pukul] LT',
          LLLL: 'dddd, D MMMM YYYY [pukul] LT',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (e, t) {
          return (
            12 === e && (e = 0),
            'pagi' === t
              ? e
              : 'tengahari' === t
                ? e >= 11
                  ? e
                  : e + 12
                : 'petang' === t || 'malam' === t
                  ? e + 12
                  : void 0
          );
        },
        meridiem: function (e) {
          return 11 > e
            ? 'pagi'
            : 15 > e
              ? 'tengahari'
              : 19 > e
                ? 'petang'
                : 'malam';
        },
        calendar: {
          sameDay: '[Hari ini pukul] LT',
          nextDay: '[Esok pukul] LT',
          nextWeek: 'dddd [pukul] LT',
          lastDay: '[Kelmarin pukul] LT',
          lastWeek: 'dddd [lepas pukul] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'dalam %s',
          past: '%s yang lepas',
          s: 'beberapa saat',
          m: 'seminit',
          mm: '%d minit',
          h: 'sejam',
          hh: '%d jam',
          d: 'sehari',
          dd: '%d hari',
          M: 'sebulan',
          MM: '%d bulan',
          y: 'setahun',
          yy: '%d tahun',
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
          1: '   ',
          2: '   ',
          3: '   ',
          4: '   ',
          5: '   ',
          6: '   ',
          7: '   ',
          8: '   ',
          9: '   ',
          0: '   ',
        },
        a = {
          '   ': '1',
          '   ': '2',
          '   ': '3',
          '   ': '4',
          '   ': '5',
          '   ': '6',
          '   ': '7',
          '   ': '8',
          '   ': '9',
          '   ': '0',
        };
      return e.defineLocale('my', {
        months:
          '                        _                              _         _            _      _            _                     _                  _                        _                              _                        _                     '.split(
            '_'
          ),
        monthsShort:
          '         _      _         _         _      _            _               _      _         _               _         _      '.split(
            '_'
          ),
        weekdays:
          '                           _                     _                  _                        _                        _                  _         '.split(
            '_'
          ),
        weekdaysShort:
          '         _      _               _         _         _         _      '.split(
            '_'
          ),
        weekdaysMin:
          '         _      _               _         _         _         _      '.split(
            '_'
          ),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'HH:mm:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[         .] LT [         ]',
          nextDay: '[                        ] LT [         ]',
          nextWeek: 'dddd LT [         ]',
          lastDay: '[         .   ] LT [         ]',
          lastWeek: '[                              ] dddd LT [         ]',
          sameElse: 'L',
        },
        relativeTime: {
          future: '                   %s          ',
          past: '                               %s    ',
          s: '                  .                        ',
          m: '                        ',
          mm: '%d                ',
          h: '                     ',
          hh: '%d             ',
          d: '                  ',
          dd: '%d          ',
          M: '            ',
          MM: '%d    ',
          y: '                     ',
          yy: '%d             ',
        },
        preparse: function (e) {
          return e.replace(/[                              ]/g, function (e) {
            return a[e];
          });
        },
        postformat: function (e) {
          return e.replace(/\d/g, function (e) {
            return t[e];
          });
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('nb', {
        months:
          'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
          ),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split(
          '_'
        ),
        weekdays: 's  ndag_mandag_tirsdag_onsdag_torsdag_fredag_l  rdag'.split(
          '_'
        ),
        weekdaysShort: 's  n_man_tirs_ons_tors_fre_l  r'.split('_'),
        weekdaysMin: 's  _ma_ti_on_to_fr_l  '.split('_'),
        longDateFormat: {
          LT: 'H.mm',
          LTS: 'LT.ss',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY [kl.] LT',
          LLLL: 'dddd D. MMMM YYYY [kl.] LT',
        },
        calendar: {
          sameDay: '[i dag kl.] LT',
          nextDay: '[i morgen kl.] LT',
          nextWeek: 'dddd [kl.] LT',
          lastDay: '[i g  r kl.] LT',
          lastWeek: '[forrige] dddd [kl.] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'om %s',
          past: 'for %s siden',
          s: 'noen sekunder',
          m: 'ett minutt',
          mm: '%d minutter',
          h: 'en time',
          hh: '%d timer',
          d: 'en dag',
          dd: '%d dager',
          M: 'en m  ned',
          MM: '%d m  neder',
          y: 'ett   r',
          yy: '%d   r',
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
          1: '   ',
          2: '   ',
          3: '   ',
          4: '   ',
          5: '   ',
          6: '   ',
          7: '   ',
          8: '   ',
          9: '   ',
          0: '   ',
        },
        a = {
          '   ': '1',
          '   ': '2',
          '   ': '3',
          '   ': '4',
          '   ': '5',
          '   ': '6',
          '   ': '7',
          '   ': '8',
          '   ': '9',
          '   ': '0',
        };
      return e.defineLocale('ne', {
        months:
          '               _                           _               _                  _      _         _               _               _                              _                     _                        _                        '.split(
            '_'
          ),
        monthsShort:
          '      ._                  ._               _               ._      _         _               ._      ._               ._               ._            ._            .'.split(
            '_'
          ),
        weekdays:
          '                  _                  _                        _                  _                     _                        _                  '.split(
            '_'
          ),
        weekdaysShort:
          '         ._         ._               ._         ._            ._               ._         .'.split(
            '_'
          ),
        weekdaysMin:
          '      ._      ._         _      ._      ._      ._   .'.split('_'),
        longDateFormat: {
          LT: 'A       h:mm          ',
          LTS: 'A       h:mm:ss          ',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT',
        },
        preparse: function (e) {
          return e.replace(/[                              ]/g, function (e) {
            return a[e];
          });
        },
        postformat: function (e) {
          return e.replace(/\d/g, function (e) {
            return t[e];
          });
        },
        meridiemParse:
          /            |               |                  |                  |            |            /,
        meridiemHour: function (e, t) {
          return (
            12 === e && (e = 0),
            '            ' === t
              ? 3 > e
                ? e
                : e + 12
              : '               ' === t
                ? e
                : '                  ' === t
                  ? e >= 10
                    ? e
                    : e + 12
                  : '                  ' === t || '            ' === t
                    ? e + 12
                    : void 0
          );
        },
        meridiem: function (e) {
          return 3 > e
            ? '            '
            : 10 > e
              ? '               '
              : 15 > e
                ? '                  '
                : 18 > e
                  ? '                  '
                  : 20 > e
                    ? '            '
                    : '            ';
        },
        calendar: {
          sameDay: '[      ] LT',
          nextDay: '[            ] LT',
          nextWeek: '[               ] dddd[,] LT',
          lastDay: '[            ] LT',
          lastWeek: '[            ] dddd[,] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s      ',
          past: '%s                ',
          s: '                      ',
          m: '                      ',
          mm: '%d                ',
          h: '                      ',
          hh: '%d                ',
          d: '                ',
          dd: '%d          ',
          M: '                      ',
          MM: '%d                ',
          y: '                   ',
          yy: '%d             ',
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t =
          'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split(
            '_'
          ),
        a = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
      return e.defineLocale('nl', {
        months:
          'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
          ),
        monthsShort: function (e, n) {
          return /-MMM-/.test(n) ? a[e.month()] : t[e.month()];
        },
        weekdays:
          'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split(
            '_'
          ),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD-MM-YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[vandaag om] LT',
          nextDay: '[morgen om] LT',
          nextWeek: 'dddd [om] LT',
          lastDay: '[gisteren om] LT',
          lastWeek: '[afgelopen] dddd [om] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'over %s',
          past: '%s geleden',
          s: 'een paar seconden',
          m: '    n minuut',
          mm: '%d minuten',
          h: '    n uur',
          hh: '%d uur',
          d: '    n dag',
          dd: '%d dagen',
          M: '    n maand',
          MM: '%d maanden',
          y: '    n jaar',
          yy: '%d jaar',
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (e) {
          return e + (1 === e || 8 === e || e >= 20 ? 'ste' : 'de');
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('nn', {
        months:
          'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
          ),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split(
          '_'
        ),
        weekdays: 'sundag_m  ndag_tysdag_onsdag_torsdag_fredag_laurdag'.split(
          '_'
        ),
        weekdaysShort: 'sun_m  n_tys_ons_tor_fre_lau'.split('_'),
        weekdaysMin: 'su_m  _ty_on_to_fr_l  '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[I dag klokka] LT',
          nextDay: '[I morgon klokka] LT',
          nextWeek: 'dddd [klokka] LT',
          lastDay: '[I g  r klokka] LT',
          lastWeek: '[F  reg  ande] dddd [klokka] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'om %s',
          past: 'for %s sidan',
          s: 'nokre sekund',
          m: 'eit minutt',
          mm: '%d minutt',
          h: 'ein time',
          hh: '%d timar',
          d: 'ein dag',
          dd: '%d dagar',
          M: 'ein m  nad',
          MM: '%d m  nader',
          y: 'eit   r',
          yy: '%d   r',
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e) {
        return 5 > e % 10 && e % 10 > 1 && ~~(e / 10) % 10 !== 1;
      }
      function a(e, a, n) {
        var s = e + ' ';
        switch (n) {
          case 'm':
            return a ? 'minuta' : 'minut  ';
          case 'mm':
            return s + (t(e) ? 'minuty' : 'minut');
          case 'h':
            return a ? 'godzina' : 'godzin  ';
          case 'hh':
            return s + (t(e) ? 'godziny' : 'godzin');
          case 'MM':
            return s + (t(e) ? 'miesi  ce' : 'miesi  cy');
          case 'yy':
            return s + (t(e) ? 'lata' : 'lat');
        }
      }
      var n =
          'stycze  _luty_marzec_kwiecie  _maj_czerwiec_lipiec_sierpie  _wrzesie  _pa  dziernik_listopad_grudzie  '.split(
            '_'
          ),
        s =
          'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrze  nia_pa  dziernika_listopada_grudnia'.split(
            '_'
          );
      return e.defineLocale('pl', {
        months: function (e, t) {
          return /D MMMM/.test(t) ? s[e.month()] : n[e.month()];
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_pa  _lis_gru'.split(
          '_'
        ),
        weekdays:
          'niedziela_poniedzia  ek_wtorek_  roda_czwartek_pi  tek_sobota'.split(
            '_'
          ),
        weekdaysShort: 'nie_pon_wt_  r_czw_pt_sb'.split('_'),
        weekdaysMin: 'N_Pn_Wt_  r_Cz_Pt_So'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Dzi   o] LT',
          nextDay: '[Jutro o] LT',
          nextWeek: '[W] dddd [o] LT',
          lastDay: '[Wczoraj o] LT',
          lastWeek: function () {
            switch (this.day()) {
              case 0:
                return '[W zesz     niedziel   o] LT';
              case 3:
                return '[W zesz       rod   o] LT';
              case 6:
                return '[W zesz     sobot   o] LT';
              default:
                return '[W zesz  y] dddd [o] LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: 'za %s',
          past: '%s temu',
          s: 'kilka sekund',
          m: a,
          mm: a,
          h: a,
          hh: a,
          d: '1 dzie  ',
          dd: '%d dni',
          M: 'miesi  c',
          MM: a,
          y: 'rok',
          yy: a,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('pt-br', {
        months:
          'janeiro_fevereiro_mar  o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
          ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split(
          '_'
        ),
        weekdays:
          'domingo_segunda-feira_ter  a-feira_quarta-feira_quinta-feira_sexta-feira_s  bado'.split(
            '_'
          ),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_s  b'.split('_'),
        weekdaysMin: 'dom_2  _3  _4  _5  _6  _s  b'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D [de] MMMM [de] YYYY',
          LLL: 'D [de] MMMM [de] YYYY [  s] LT',
          LLLL: 'dddd, D [de] MMMM [de] YYYY [  s] LT',
        },
        calendar: {
          sameDay: '[Hoje   s] LT',
          nextDay: '[Amanh     s] LT',
          nextWeek: 'dddd [  s] LT',
          lastDay: '[Ontem   s] LT',
          lastWeek: function () {
            return 0 === this.day() || 6 === this.day()
              ? '[  ltimo] dddd [  s] LT'
              : '[  ltima] dddd [  s] LT';
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: 'em %s',
          past: '%s atr  s',
          s: 'segundos',
          m: 'um minuto',
          mm: '%d minutos',
          h: 'uma hora',
          hh: '%d horas',
          d: 'um dia',
          dd: '%d dias',
          M: 'um m  s',
          MM: '%d meses',
          y: 'um ano',
          yy: '%d anos',
        },
        ordinalParse: /\d{1,2}  /,
        ordinal: '%d  ',
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('pt', {
        months:
          'janeiro_fevereiro_mar  o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
          ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split(
          '_'
        ),
        weekdays:
          'domingo_segunda-feira_ter  a-feira_quarta-feira_quinta-feira_sexta-feira_s  bado'.split(
            '_'
          ),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_s  b'.split('_'),
        weekdaysMin: 'dom_2  _3  _4  _5  _6  _s  b'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D [de] MMMM [de] YYYY',
          LLL: 'D [de] MMMM [de] YYYY LT',
          LLLL: 'dddd, D [de] MMMM [de] YYYY LT',
        },
        calendar: {
          sameDay: '[Hoje   s] LT',
          nextDay: '[Amanh     s] LT',
          nextWeek: 'dddd [  s] LT',
          lastDay: '[Ontem   s] LT',
          lastWeek: function () {
            return 0 === this.day() || 6 === this.day()
              ? '[  ltimo] dddd [  s] LT'
              : '[  ltima] dddd [  s] LT';
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: 'em %s',
          past: 'h   %s',
          s: 'segundos',
          m: 'um minuto',
          mm: '%d minutos',
          h: 'uma hora',
          hh: '%d horas',
          d: 'um dia',
          dd: '%d dias',
          M: 'um m  s',
          MM: '%d meses',
          y: 'um ano',
          yy: '%d anos',
        },
        ordinalParse: /\d{1,2}  /,
        ordinal: '%d  ',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a) {
        var n = { mm: 'minute', hh: 'ore', dd: 'zile', MM: 'luni', yy: 'ani' },
          s = ' ';
        return (
          (e % 100 >= 20 || (e >= 100 && e % 100 === 0)) && (s = ' de '),
          e + s + n[a]
        );
      }
      return e.defineLocale('ro', {
        months:
          'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split(
            '_'
          ),
        monthsShort:
          'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split(
            '_'
          ),
        weekdays: 'duminic  _luni_mar  i_miercuri_joi_vineri_s  mb  t  '.split(
          '_'
        ),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_S  m'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_S  '.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY H:mm',
          LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
          sameDay: '[azi la] LT',
          nextDay: '[m  ine la] LT',
          nextWeek: 'dddd [la] LT',
          lastDay: '[ieri la] LT',
          lastWeek: '[fosta] dddd [la] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'peste %s',
          past: '%s   n urm  ',
          s: 'c  teva secunde',
          m: 'un minut',
          mm: t,
          h: 'o or  ',
          hh: t,
          d: 'o zi',
          dd: t,
          M: 'o lun  ',
          MM: t,
          y: 'un an',
          yy: t,
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t) {
        var a = e.split('_');
        return t % 10 === 1 && t % 100 !== 11
          ? a[0]
          : t % 10 >= 2 && 4 >= t % 10 && (10 > t % 100 || t % 100 >= 20)
            ? a[1]
            : a[2];
      }
      function a(e, a, n) {
        var s = {
          mm: a
            ? '            _            _          '
            : '            _            _          ',
          hh: '      _        _          ',
          dd: '        _      _        ',
          MM: '          _            _              ',
          yy: '      _        _      ',
        };
        return 'm' === n
          ? a
            ? '            '
            : '            '
          : e + ' ' + t(s[n], +e);
      }
      function n(e, t) {
        var a = {
            nominative:
              '            _              _        _            _      _        _        _            _                _              _            _              '.split(
                '_'
              ),
            accusative:
              '            _              _          _            _      _        _        _              _                _              _            _              '.split(
                '_'
              ),
          },
          n = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(t)
            ? 'accusative'
            : 'nominative';
        return a[n][e.month()];
      }
      function s(e, t) {
        var a = {
            nominative:
              '      _      _        _      _      _        _        _      _      _      _      _      '.split(
                '_'
              ),
            accusative:
              '      _      _      _      _      _        _        _      _      _      _      _      '.split(
                '_'
              ),
          },
          n = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(t)
            ? 'accusative'
            : 'nominative';
        return a[n][e.month()];
      }
      function r(e, t) {
        var a = {
            nominative:
              '                      _                      _              _          _              _              _              '.split(
                '_'
              ),
            accusative:
              '                      _                      _              _          _              _              _              '.split(
                '_'
              ),
          },
          n =
            /\[ ?[    ] ?(?:              |                  |      )? ?\] ?dddd/.test(
              t
            )
              ? 'accusative'
              : 'nominative';
        return a[n][e.day()];
      }
      return e.defineLocale('ru', {
        months: n,
        monthsShort: s,
        weekdays: r,
        weekdaysShort: '    _    _    _    _    _    _    '.split('_'),
        weekdaysMin: '    _    _    _    _    _    _    '.split('_'),
        monthsParse: [
          /^      /i,
          /^      /i,
          /^      /i,
          /^      /i,
          /^    [  |  ]/i,
          /^      /i,
          /^      /i,
          /^      /i,
          /^      /i,
          /^      /i,
          /^      /i,
          /^      /i,
        ],
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY   .',
          LLL: 'D MMMM YYYY   ., LT',
          LLLL: 'dddd, D MMMM YYYY   ., LT',
        },
        calendar: {
          sameDay: '[                 ] LT',
          nextDay: '[               ] LT',
          lastDay: '[             ] LT',
          nextWeek: function () {
            return 2 === this.day()
              ? '[    ] dddd [  ] LT'
              : '[  ] dddd [  ] LT';
          },
          lastWeek: function (e) {
            if (e.week() === this.week())
              return 2 === this.day()
                ? '[    ] dddd [  ] LT'
                : '[  ] dddd [  ] LT';
            switch (this.day()) {
              case 0:
                return '[                 ] dddd [  ] LT';
              case 1:
              case 2:
              case 4:
                return '[                 ] dddd [  ] LT';
              case 3:
              case 5:
              case 6:
                return '[                 ] dddd [  ] LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: '           %s',
          past: '%s           ',
          s: '                               ',
          m: a,
          mm: a,
          h: '      ',
          hh: a,
          d: '        ',
          dd: a,
          M: '          ',
          MM: a,
          y: '      ',
          yy: a,
        },
        meridiemParse: /        |        |      |            /i,
        isPM: function (e) {
          return /^(      |            )$/.test(e);
        },
        meridiem: function (e) {
          return 4 > e
            ? '        '
            : 12 > e
              ? '        '
              : 17 > e
                ? '      '
                : '            ';
        },
        ordinalParse: /\d{1,2}-(  |    |  )/,
        ordinal: function (e, t) {
          switch (t) {
            case 'M':
            case 'd':
            case 'DDD':
              return e + '-  ';
            case 'D':
              return e + '-    ';
            case 'w':
            case 'W':
              return e + '-  ';
            default:
              return e;
          }
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e) {
        return e > 1 && 5 > e;
      }
      function a(e, a, n, s) {
        var r = e + ' ';
        switch (n) {
          case 's':
            return a || s ? 'p  r sek  nd' : 'p  r sekundami';
          case 'm':
            return a ? 'min  ta' : s ? 'min  tu' : 'min  tou';
          case 'mm':
            return a || s ? r + (t(e) ? 'min  ty' : 'min  t') : r + 'min  tami';
          case 'h':
            return a ? 'hodina' : s ? 'hodinu' : 'hodinou';
          case 'hh':
            return a || s ? r + (t(e) ? 'hodiny' : 'hod  n') : r + 'hodinami';
          case 'd':
            return a || s ? 'de  ' : 'd  om';
          case 'dd':
            return a || s ? r + (t(e) ? 'dni' : 'dn  ') : r + 'd  ami';
          case 'M':
            return a || s ? 'mesiac' : 'mesiacom';
          case 'MM':
            return a || s
              ? r + (t(e) ? 'mesiace' : 'mesiacov')
              : r + 'mesiacmi';
          case 'y':
            return a || s ? 'rok' : 'rokom';
          case 'yy':
            return a || s ? r + (t(e) ? 'roky' : 'rokov') : r + 'rokmi';
        }
      }
      var n =
          'janu  r_febru  r_marec_apr  l_m  j_j  n_j  l_august_september_okt  ber_november_december'.split(
            '_'
          ),
        s = 'jan_feb_mar_apr_m  j_j  n_j  l_aug_sep_okt_nov_dec'.split('_');
      return e.defineLocale('sk', {
        months: n,
        monthsShort: s,
        monthsParse: (function (e, t) {
          var a,
            n = [];
          for (a = 0; 12 > a; a++)
            n[a] = new RegExp('^' + e[a] + '$|^' + t[a] + '$', 'i');
          return n;
        })(n, s),
        weekdays: 'nede  a_pondelok_utorok_streda_  tvrtok_piatok_sobota'.split(
          '_'
        ),
        weekdaysShort: 'ne_po_ut_st_  t_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_  t_pi_so'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd D. MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[dnes o] LT',
          nextDay: '[zajtra o] LT',
          nextWeek: function () {
            switch (this.day()) {
              case 0:
                return '[v nede  u o] LT';
              case 1:
              case 2:
                return '[v] dddd [o] LT';
              case 3:
                return '[v stredu o] LT';
              case 4:
                return '[vo   tvrtok o] LT';
              case 5:
                return '[v piatok o] LT';
              case 6:
                return '[v sobotu o] LT';
            }
          },
          lastDay: '[v  era o] LT',
          lastWeek: function () {
            switch (this.day()) {
              case 0:
                return '[minul   nede  u o] LT';
              case 1:
              case 2:
                return '[minul  ] dddd [o] LT';
              case 3:
                return '[minul   stredu o] LT';
              case 4:
              case 5:
                return '[minul  ] dddd [o] LT';
              case 6:
                return '[minul   sobotu o] LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: 'za %s',
          past: 'pred %s',
          s: a,
          m: a,
          mm: a,
          h: a,
          hh: a,
          d: a,
          dd: a,
          M: a,
          MM: a,
          y: a,
          yy: a,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t, a) {
        var n = e + ' ';
        switch (a) {
          case 'm':
            return t ? 'ena minuta' : 'eno minuto';
          case 'mm':
            return (n +=
              1 === e
                ? 'minuta'
                : 2 === e
                  ? 'minuti'
                  : 3 === e || 4 === e
                    ? 'minute'
                    : 'minut');
          case 'h':
            return t ? 'ena ura' : 'eno uro';
          case 'hh':
            return (n +=
              1 === e
                ? 'ura'
                : 2 === e
                  ? 'uri'
                  : 3 === e || 4 === e
                    ? 'ure'
                    : 'ur');
          case 'dd':
            return (n += 1 === e ? 'dan' : 'dni');
          case 'MM':
            return (n +=
              1 === e
                ? 'mesec'
                : 2 === e
                  ? 'meseca'
                  : 3 === e || 4 === e
                    ? 'mesece'
                    : 'mesecev');
          case 'yy':
            return (n +=
              1 === e
                ? 'leto'
                : 2 === e
                  ? 'leti'
                  : 3 === e || 4 === e
                    ? 'leta'
                    : 'let');
        }
      }
      return e.defineLocale('sl', {
        months:
          'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split(
            '_'
          ),
        monthsShort:
          'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split(
            '_'
          ),
        weekdays: 'nedelja_ponedeljek_torek_sreda_  etrtek_petek_sobota'.split(
          '_'
        ),
        weekdaysShort: 'ned._pon._tor._sre._  et._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_  e_pe_so'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD. MM. YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[danes ob] LT',
          nextDay: '[jutri ob] LT',
          nextWeek: function () {
            switch (this.day()) {
              case 0:
                return '[v] [nedeljo] [ob] LT';
              case 3:
                return '[v] [sredo] [ob] LT';
              case 6:
                return '[v] [soboto] [ob] LT';
              case 1:
              case 2:
              case 4:
              case 5:
                return '[v] dddd [ob] LT';
            }
          },
          lastDay: '[v  eraj ob] LT',
          lastWeek: function () {
            switch (this.day()) {
              case 0:
              case 3:
              case 6:
                return '[prej  nja] dddd [ob] LT';
              case 1:
              case 2:
              case 4:
              case 5:
                return '[prej  nji] dddd [ob] LT';
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: '  ez %s',
          past: '%s nazaj',
          s: 'nekaj sekund',
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: 'en dan',
          dd: t,
          M: 'en mesec',
          MM: t,
          y: 'eno leto',
          yy: t,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('sq', {
        months:
          'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_N  ntor_Dhjetor'.split(
            '_'
          ),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_N  n_Dhj'.split(
          '_'
        ),
        weekdays:
          'E Diel_E H  n  _E Mart  _E M  rkur  _E Enjte_E Premte_E Shtun  '.split(
            '_'
          ),
        weekdaysShort: 'Die_H  n_Mar_M  r_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_M  _E_P_Sh'.split('_'),
        meridiemParse: /PD|MD/,
        isPM: function (e) {
          return 'M' === e.charAt(0);
        },
        meridiem: function (e) {
          return 12 > e ? 'PD' : 'MD';
        },
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Sot n  ] LT',
          nextDay: '[Nes  r n  ] LT',
          nextWeek: 'dddd [n  ] LT',
          lastDay: '[Dje n  ] LT',
          lastWeek: 'dddd [e kaluar n  ] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'n   %s',
          past: '%s m   par  ',
          s: 'disa sekonda',
          m: 'nj   minut  ',
          mm: '%d minuta',
          h: 'nj   or  ',
          hh: '%d or  ',
          d: 'nj   dit  ',
          dd: '%d dit  ',
          M: 'nj   muaj',
          MM: '%d muaj',
          y: 'nj   vit',
          yy: '%d vite',
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
        words: {
          m: ['                     ', '                       '],
          mm: ['          ', '            ', '            '],
          h: ['                 ', '                     '],
          hh: ['      ', '        ', '        '],
          dd: ['      ', '        ', '        '],
          MM: ['          ', '            ', '            '],
          yy: ['            ', '            ', '            '],
        },
        correctGrammaticalCase: function (e, t) {
          return 1 === e ? t[0] : e >= 2 && 4 >= e ? t[1] : t[2];
        },
        translate: function (e, a, n) {
          var s = t.words[n];
          return 1 === n.length
            ? a
              ? s[0]
              : s[1]
            : e + ' ' + t.correctGrammaticalCase(e, s);
        },
      };
      return e.defineLocale('sr-cyrl', {
        months: [
          '            ',
          '              ',
          '        ',
          '          ',
          '      ',
          '      ',
          '      ',
          '            ',
          '                  ',
          '              ',
          '                ',
          '                ',
        ],
        monthsShort: [
          '      .',
          '      .',
          '      .',
          '      .',
          '      ',
          '      ',
          '      ',
          '      .',
          '      .',
          '      .',
          '      .',
          '      .',
        ],
        weekdays: [
          '            ',
          '                  ',
          '            ',
          '          ',
          '                ',
          '          ',
          '            ',
        ],
        weekdaysShort: [
          '      .',
          '      .',
          '      .',
          '      .',
          '      .',
          '      .',
          '      .',
        ],
        weekdaysMin: ['    ', '    ', '    ', '    ', '    ', '    ', '    '],
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD. MM. YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[             ] LT',
          nextDay: '[             ] LT',
          nextWeek: function () {
            switch (this.day()) {
              case 0:
                return '[  ] [            ] [  ] LT';
              case 3:
                return '[  ] [          ] [  ] LT';
              case 6:
                return '[  ] [            ] [  ] LT';
              case 1:
              case 2:
              case 4:
              case 5:
                return '[  ] dddd [  ] LT';
            }
          },
          lastDay: '[           ] LT',
          lastWeek: function () {
            var e = [
              '[            ] [            ] [  ] LT',
              '[              ] [                  ] [  ] LT',
              '[              ] [            ] [  ] LT',
              '[            ] [          ] [  ] LT',
              '[              ] [                ] [  ] LT',
              '[              ] [          ] [  ] LT',
              '[            ] [            ] [  ] LT',
            ];
            return e[this.day()];
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: '     %s',
          past: '       %s',
          s: '                               ',
          m: t.translate,
          mm: t.translate,
          h: t.translate,
          hh: t.translate,
          d: '      ',
          dd: t.translate,
          M: '          ',
          MM: t.translate,
          y: '            ',
          yy: t.translate,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
        words: {
          m: ['jedan minut', 'jedne minute'],
          mm: ['minut', 'minute', 'minuta'],
          h: ['jedan sat', 'jednog sata'],
          hh: ['sat', 'sata', 'sati'],
          dd: ['dan', 'dana', 'dana'],
          MM: ['mesec', 'meseca', 'meseci'],
          yy: ['godina', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (e, t) {
          return 1 === e ? t[0] : e >= 2 && 4 >= e ? t[1] : t[2];
        },
        translate: function (e, a, n) {
          var s = t.words[n];
          return 1 === n.length
            ? a
              ? s[0]
              : s[1]
            : e + ' ' + t.correctGrammaticalCase(e, s);
        },
      };
      return e.defineLocale('sr', {
        months: [
          'januar',
          'februar',
          'mart',
          'april',
          'maj',
          'jun',
          'jul',
          'avgust',
          'septembar',
          'oktobar',
          'novembar',
          'decembar',
        ],
        monthsShort: [
          'jan.',
          'feb.',
          'mar.',
          'apr.',
          'maj',
          'jun',
          'jul',
          'avg.',
          'sep.',
          'okt.',
          'nov.',
          'dec.',
        ],
        weekdays: [
          'nedelja',
          'ponedeljak',
          'utorak',
          'sreda',
          '  etvrtak',
          'petak',
          'subota',
        ],
        weekdaysShort: [
          'ned.',
          'pon.',
          'uto.',
          'sre.',
          '  et.',
          'pet.',
          'sub.',
        ],
        weekdaysMin: ['ne', 'po', 'ut', 'sr', '  e', 'pe', 'su'],
        longDateFormat: {
          LT: 'H:mm',
          LTS: 'LT:ss',
          L: 'DD. MM. YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[danas u] LT',
          nextDay: '[sutra u] LT',
          nextWeek: function () {
            switch (this.day()) {
              case 0:
                return '[u] [nedelju] [u] LT';
              case 3:
                return '[u] [sredu] [u] LT';
              case 6:
                return '[u] [subotu] [u] LT';
              case 1:
              case 2:
              case 4:
              case 5:
                return '[u] dddd [u] LT';
            }
          },
          lastDay: '[ju  e u] LT',
          lastWeek: function () {
            var e = [
              '[pro  le] [nedelje] [u] LT',
              '[pro  log] [ponedeljka] [u] LT',
              '[pro  log] [utorka] [u] LT',
              '[pro  le] [srede] [u] LT',
              '[pro  log] [  etvrtka] [u] LT',
              '[pro  log] [petka] [u] LT',
              '[pro  le] [subote] [u] LT',
            ];
            return e[this.day()];
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: 'za %s',
          past: 'pre %s',
          s: 'nekoliko sekundi',
          m: t.translate,
          mm: t.translate,
          h: t.translate,
          hh: t.translate,
          d: 'dan',
          dd: t.translate,
          M: 'mesec',
          MM: t.translate,
          y: 'godinu',
          yy: t.translate,
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('sv', {
        months:
          'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split(
            '_'
          ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split(
          '_'
        ),
        weekdays: 's  ndag_m  ndag_tisdag_onsdag_torsdag_fredag_l  rdag'.split(
          '_'
        ),
        weekdaysShort: 's  n_m  n_tis_ons_tor_fre_l  r'.split('_'),
        weekdaysMin: 's  _m  _ti_on_to_fr_l  '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'YYYY-MM-DD',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[Idag] LT',
          nextDay: '[Imorgon] LT',
          lastDay: '[Ig  r] LT',
          nextWeek: 'dddd LT',
          lastWeek: '[F  rra] dddd[en] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'om %s',
          past: 'f  r %s sedan',
          s: 'n  gra sekunder',
          m: 'en minut',
          mm: '%d minuter',
          h: 'en timme',
          hh: '%d timmar',
          d: 'en dag',
          dd: '%d dagar',
          M: 'en m  nad',
          MM: '%d m  nader',
          y: 'ett   r',
          yy: '%d   r',
        },
        ordinalParse: /\d{1,2}(e|a)/,
        ordinal: function (e) {
          var t = e % 10,
            a =
              1 === ~~((e % 100) / 10)
                ? 'e'
                : 1 === t
                  ? 'a'
                  : 2 === t
                    ? 'a'
                    : 'e';
          return e + a;
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('ta', {
        months:
          '               _                        _                  _                  _      _            _            _                  _                                 _                           _                     _                        '.split(
            '_'
          ),
        monthsShort:
          '               _                        _                  _                  _      _            _            _                  _                                 _                           _                     _                        '.split(
            '_'
          ),
        weekdays:
          '                                             _                                    _                                       _                              _                                    _                                       _                              '.split(
            '_'
          ),
        weekdaysShort:
          '                  _                     _                        _               _                     _                  _         '.split(
            '_'
          ),
        weekdaysMin: '      _      _      _      _      _      _   '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT',
        },
        calendar: {
          sameDay: '[               ] LT',
          nextDay: '[            ] LT',
          nextWeek: 'dddd, LT',
          lastDay: '[                  ] LT',
          lastWeek: '[                               ] dddd, LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s          ',
          past: '%s             ',
          s: '                                               ',
          m: '                               ',
          mm: '%d                               ',
          h: '                                   ',
          hh: '%d                          ',
          d: '                      ',
          dd: '%d                      ',
          M: '                         ',
          MM: '%d                         ',
          y: '                            ',
          yy: '%d                         ',
        },
        ordinalParse: /\d{1,2}         /,
        ordinal: function (e) {
          return e + '         ';
        },
        meridiemParse:
          /               |               |            |                     |                     |            /,
        meridiem: function (e) {
          return 2 > e
            ? '                '
            : 6 > e
              ? '                '
              : 10 > e
                ? '             '
                : 14 > e
                  ? '                      '
                  : 18 > e
                    ? '                      '
                    : 22 > e
                      ? '             '
                      : '                ';
        },
        meridiemHour: function (e, t) {
          return (
            12 === e && (e = 0),
            '               ' === t
              ? 2 > e
                ? e
                : e + 12
              : '               ' === t || '            ' === t
                ? e
                : '                     ' === t && e >= 10
                  ? e
                  : e + 12
          );
        },
        week: { dow: 0, doy: 6 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('th', {
        months:
          '                  _                              _                  _                  _                     _                        _                     _                     _                     _                  _                           _                     '.split(
            '_'
          ),
        monthsShort:
          '            _               _            _            _               _                  _               _               _               _            _                     _               '.split(
            '_'
          ),
        weekdays:
          '                     _                  _                  _         _                        _               _               '.split(
            '_'
          ),
        weekdaysShort:
          '                     _                  _                  _         _               _               _               '.split(
            '_'
          ),
        weekdaysMin: '      ._   ._   ._   ._      ._   ._   .'.split('_'),
        longDateFormat: {
          LT: 'H                    m             ',
          LTS: 'LT s                   ',
          L: 'YYYY/MM/DD',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY              LT',
          LLLL: '         dddd          D MMMM YYYY              LT',
        },
        meridiemParse:
          /                              |                              /,
        isPM: function (e) {
          return '                              ' === e;
        },
        meridiem: function (e) {
          return 12 > e
            ? '                              '
            : '                              ';
        },
        calendar: {
          sameDay: '[                               ] LT',
          nextDay: '[                                     ] LT',
          nextWeek: 'dddd[                         ] LT',
          lastDay: '[                                              ] LT',
          lastWeek: '[         ]dddd[                                  ] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '          %s',
          past: '%s                     ',
          s: '                                    ',
          m: '1             ',
          mm: '%d             ',
          h: '1                      ',
          hh: '%d                      ',
          d: '1          ',
          dd: '%d          ',
          M: '1                ',
          MM: '%d                ',
          y: '1       ',
          yy: '%d       ',
        },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('tl-ph', {
        months:
          'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
          ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split(
          '_'
        ),
        weekdays:
          'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'MM/D/YYYY',
          LL: 'MMMM D, YYYY',
          LLL: 'MMMM D, YYYY LT',
          LLLL: 'dddd, MMMM DD, YYYY LT',
        },
        calendar: {
          sameDay: '[Ngayon sa] LT',
          nextDay: '[Bukas sa] LT',
          nextWeek: 'dddd [sa] LT',
          lastDay: '[Kahapon sa] LT',
          lastWeek: 'dddd [huling linggo] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'sa loob ng %s',
          past: '%s ang nakalipas',
          s: 'ilang segundo',
          m: 'isang minuto',
          mm: '%d minuto',
          h: 'isang oras',
          hh: '%d oras',
          d: 'isang araw',
          dd: '%d araw',
          M: 'isang buwan',
          MM: '%d buwan',
          y: 'isang taon',
          yy: '%d taon',
        },
        ordinalParse: /\d{1,2}/,
        ordinal: function (e) {
          return e;
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      var t = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",
        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",
        3: "'  nc  ",
        4: "'nc",
        100: "'  nc  ",
        6: "'nc",
        9: "'uncu",
        10: "'uncu",
        30: "'uncu",
        60: "'nc",
        90: "'  nc  ",
      };
      return e.defineLocale('tr', {
        months:
          'Ocak_  ubat_Mart_Nisan_May  s_Haziran_Temmuz_A  ustos_Eyl  l_Ekim_Kas  m_Aral  k'.split(
            '_'
          ),
        monthsShort: 'Oca_  ub_Mar_Nis_May_Haz_Tem_A  u_Eyl_Eki_Kas_Ara'.split(
          '_'
        ),
        weekdays:
          'Pazar_Pazartesi_Sal  _  ar  amba_Per  embe_Cuma_Cumartesi'.split(
            '_'
          ),
        weekdaysShort: 'Paz_Pts_Sal_  ar_Per_Cum_Cts'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_  a_Pe_Cu_Ct'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[bug  n saat] LT',
          nextDay: '[yar  n saat] LT',
          nextWeek: '[haftaya] dddd [saat] LT',
          lastDay: '[d  n] LT',
          lastWeek: '[ge  en hafta] dddd [saat] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s sonra',
          past: '%s   nce',
          s: 'birka   saniye',
          m: 'bir dakika',
          mm: '%d dakika',
          h: 'bir saat',
          hh: '%d saat',
          d: 'bir g  n',
          dd: '%d g  n',
          M: 'bir ay',
          MM: '%d ay',
          y: 'bir y  l',
          yy: '%d y  l',
        },
        ordinalParse: /\d{1,2}'(inci|nci|nc|nc|uncu|nc)/,
        ordinal: function (e) {
          if (0 === e) return e + "'  nc  ";
          var a = e % 10,
            n = (e % 100) - a,
            s = e >= 100 ? 100 : null;
          return e + (t[a] || t[n] || t[s]);
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('tzm-latn', {
        months:
          'innayr_br  ayr  _mar  s  _ibrir_mayyw_ywnyw_ywlywz_  w  t_  wtanbir_kt  wbr  _nwwanbir_dwjnbir'.split(
            '_'
          ),
        monthsShort:
          'innayr_br  ayr  _mar  s  _ibrir_mayyw_ywnyw_ywlywz_  w  t_  wtanbir_kt  wbr  _nwwanbir_dwjnbir'.split(
            '_'
          ),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asi   yas'.split(
          '_'
        ),
        weekdaysShort:
          'asamas_aynas_asinas_akras_akwas_asimwas_asi   yas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asi   yas'.split(
          '_'
        ),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[asdkh g] LT',
          nextDay: '[aska g] LT',
          nextWeek: 'dddd [g] LT',
          lastDay: '[assant g] LT',
          lastWeek: 'dddd [g] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: 'dadkh s yan %s',
          past: 'yan %s',
          s: 'imik',
          m: 'minu   ',
          mm: '%d minu   ',
          h: 'sa  a',
          hh: '%d tassa  in',
          d: 'ass',
          dd: '%d ossan',
          M: 'ayowr',
          MM: '%d iyyirn',
          y: 'asgas',
          yy: '%d isgasn',
        },
        week: { dow: 6, doy: 12 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('tzm', {
        months:
          '                  _               _            _               _               _               _                  _            _                        _               _                        _                     '.split(
            '_'
          ),
        monthsShort:
          '                  _               _            _               _               _               _                  _            _                        _               _                        _                     '.split(
            '_'
          ),
        weekdays:
          '                  _               _                  _               _               _                     _                     '.split(
            '_'
          ),
        weekdaysShort:
          '                  _               _                  _               _               _                     _                     '.split(
            '_'
          ),
        weekdaysMin:
          '                  _               _                  _               _               _                     _                     '.split(
            '_'
          ),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT',
        },
        calendar: {
          sameDay: '[                ] LT',
          nextDay: '[                ] LT',
          nextWeek: 'dddd [   ] LT',
          lastDay: '[                   ] LT',
          lastWeek: 'dddd [   ] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '                           %s',
          past: '          %s',
          s: '            ',
          m: '               ',
          mm: '%d                ',
          h: '            ',
          hh: '%d                         ',
          d: '         ',
          dd: '%d o            ',
          M: '      o      ',
          MM: '%d                   ',
          y: '               ',
          yy: '%d                   ',
        },
        week: { dow: 6, doy: 12 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      function t(e, t) {
        var a = e.split('_');
        return t % 10 === 1 && t % 100 !== 11
          ? a[0]
          : t % 10 >= 2 && 4 >= t % 10 && (10 > t % 100 || t % 100 >= 20)
            ? a[1]
            : a[2];
      }
      function a(e, a, n) {
        var s = {
          mm: '              _              _            ',
          hh: '            _            _          ',
          dd: '        _      _        ',
          MM: '            _            _              ',
          yy: '      _        _          ',
        };
        return 'm' === n
          ? a
            ? '              '
            : '              '
          : 'h' === n
            ? a
              ? '            '
              : '            '
            : e + ' ' + t(s[n], +e);
      }
      function n(e, t) {
        var a = {
            nominative:
              '            _          _                _              _              _              _            _              _                _              _                _              '.split(
                '_'
              ),
            accusative:
              '          _            _              _            _            _            _          _            _              _            _                  _            '.split(
                '_'
              ),
          },
          n = /D[oD]? *MMMM?/.test(t) ? 'accusative' : 'nominative';
        return a[n][e.month()];
      }
      function s(e, t) {
        var a = {
            nominative:
              '            _                  _                _            _            _                 _            '.split(
                '_'
              ),
            accusative:
              '            _                  _                _            _            _                 _            '.split(
                '_'
              ),
            genitive:
              '            _                  _                _            _                _                 _            '.split(
                '_'
              ),
          },
          n = /(\[[        ]\]) ?dddd/.test(t)
            ? 'accusative'
            : /\[?(?:              |                  )? ?\] ?dddd/.test(t)
              ? 'genitive'
              : 'nominative';
        return a[n][e.day()];
      }
      function r(e) {
        return function () {
          return e + '  ' + (11 === this.hours() ? '  ' : '') + '] LT';
        };
      }
      return e.defineLocale('uk', {
        months: n,
        monthsShort:
          '      _      _      _        _        _        _      _        _      _        _        _        '.split(
            '_'
          ),
        weekdays: s,
        weekdaysShort: '    _    _    _    _    _    _    '.split('_'),
        weekdaysMin: '    _    _    _    _    _    _    '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY   .',
          LLL: 'D MMMM YYYY   ., LT',
          LLLL: 'dddd, D MMMM YYYY   ., LT',
        },
        calendar: {
          sameDay: r('[                 '),
          nextDay: r('[             '),
          lastDay: r('[           '),
          nextWeek: r('[  ] dddd ['),
          lastWeek: function () {
            switch (this.day()) {
              case 0:
              case 3:
              case 5:
              case 6:
                return r('[              ] dddd [').call(this);
              case 1:
              case 2:
              case 4:
                return r('[                ] dddd [').call(this);
            }
          },
          sameElse: 'L',
        },
        relativeTime: {
          future: '     %s',
          past: '%s         ',
          s: '                             ',
          m: a,
          mm: a,
          h: '            ',
          hh: a,
          d: '        ',
          dd: a,
          M: '            ',
          MM: a,
          y: '      ',
          yy: a,
        },
        meridiemParse: /        |          |      |            /,
        isPM: function (e) {
          return /^(|)$/.test(e);
        },
        meridiem: function (e) {
          return 4 > e
            ? '        '
            : 12 > e
              ? '          '
              : 17 > e
                ? '      '
                : '            ';
        },
        ordinalParse: /\d{1,2}-(  |    )/,
        ordinal: function (e, t) {
          switch (t) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
              return e + '-  ';
            case 'D':
              return e + '-    ';
            default:
              return e;
          }
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('uz', {
        months:
          '            _              _        _            _      _        _        _            _                _              _            _              '.split(
            '_'
          ),
        monthsShort:
          '      _      _      _      _      _      _      _      _      _      _      _      '.split(
            '_'
          ),
        weekdays:
          '              _              _              _                _                _        _          '.split(
            '_'
          ),
        weekdaysShort: '      _      _      _      _      _      _      '.split(
          '_'
        ),
        weekdaysMin: '    _    _    _    _    _    _    '.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'D MMMM YYYY, dddd LT',
        },
        calendar: {
          sameDay: '[                   ] LT [    ]',
          nextDay: '[            ] LT [    ]',
          nextWeek: 'dddd [                 ] LT [    ]',
          lastDay: '[                 ] LT [    ]',
          lastWeek: '[          ] dddd [                 ] LT [    ]',
          sameElse: 'L',
        },
        relativeTime: {
          future: '         %s           ',
          past: '                %s           ',
          s: '            ',
          m: '                   ',
          mm: '%d             ',
          h: '               ',
          hh: '%d         ',
          d: '             ',
          dd: '%d       ',
          M: '           ',
          MM: '%d     ',
          y: '             ',
          yy: '%d       ',
        },
        week: { dow: 1, doy: 7 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('vi', {
        months:
          'th  ng 1_th  ng 2_th  ng 3_th  ng 4_th  ng 5_th  ng 6_th  ng 7_th  ng 8_th  ng 9_th  ng 10_th  ng 11_th  ng 12'.split(
            '_'
          ),
        monthsShort:
          'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split(
            '_'
          ),
        weekdays:
          'ch    nh   t_th    hai_th    ba_th    t  _th    n  m_th    s  u_th    b   y'.split(
            '_'
          ),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          LTS: 'LT:ss',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM [n  m] YYYY',
          LLL: 'D MMMM [n  m] YYYY LT',
          LLLL: 'dddd, D MMMM [n  m] YYYY LT',
          l: 'DD/M/YYYY',
          ll: 'D MMM YYYY',
          lll: 'D MMM YYYY LT',
          llll: 'ddd, D MMM YYYY LT',
        },
        calendar: {
          sameDay: '[H  m nay l  c] LT',
          nextDay: '[Ng  y mai l  c] LT',
          nextWeek: 'dddd [tu   n t   i l  c] LT',
          lastDay: '[H  m qua l  c] LT',
          lastWeek: 'dddd [tu   n r   i l  c] LT',
          sameElse: 'L',
        },
        relativeTime: {
          future: '%s t   i',
          past: '%s tr     c',
          s: 'v  i gi  y',
          m: 'm   t ph  t',
          mm: '%d ph  t',
          h: 'm   t gi   ',
          hh: '%d gi   ',
          d: 'm   t ng  y',
          dd: '%d ng  y',
          M: 'm   t th  ng',
          MM: '%d th  ng',
          y: 'm   t n  m',
          yy: '%d n  m',
        },
        ordinalParse: /\d{1,2}/,
        ordinal: function (e) {
          return e;
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('zh-cn', {
        months:
          '      _      _      _      _      _      _      _      _      _      _         _         '.split(
            '_'
          ),
        monthsShort:
          '1   _2   _3   _4   _5   _6   _7   _8   _9   _10   _11   _12   '.split(
            '_'
          ),
        weekdays:
          '         _         _         _         _         _         _         '.split(
            '_'
          ),
        weekdaysShort: '      _      _      _      _      _      _      '.split(
          '_'
        ),
        weekdaysMin: '   _   _   _   _   _   _   '.split('_'),
        longDateFormat: {
          LT: 'Ah   mm',
          LTS: 'Ah   m   s   ',
          L: 'YYYY-MM-DD',
          LL: 'YYYY   MMMD   ',
          LLL: 'YYYY   MMMD   LT',
          LLLL: 'YYYY   MMMD   ddddLT',
          l: 'YYYY-MM-DD',
          ll: 'YYYY   MMMD   ',
          lll: 'YYYY   MMMD   LT',
          llll: 'YYYY   MMMD   ddddLT',
        },
        meridiemParse: /      |      |      |      |      |      /,
        meridiemHour: function (e, t) {
          return (
            12 === e && (e = 0),
            '      ' === t || '      ' === t || '      ' === t
              ? e
              : '      ' === t || '      ' === t
                ? e + 12
                : e >= 11
                  ? e
                  : e + 12
          );
        },
        meridiem: function (e, t) {
          var a = 100 * e + t;
          return 600 > a
            ? '      '
            : 900 > a
              ? '      '
              : 1130 > a
                ? '      '
                : 1230 > a
                  ? '      '
                  : 1800 > a
                    ? '      '
                    : '      ';
        },
        calendar: {
          sameDay: function () {
            return 0 === this.minutes() ? '[      ]Ah[      ]' : '[      ]LT';
          },
          nextDay: function () {
            return 0 === this.minutes() ? '[      ]Ah[      ]' : '[      ]LT';
          },
          lastDay: function () {
            return 0 === this.minutes() ? '[      ]Ah[      ]' : '[      ]LT';
          },
          nextWeek: function () {
            var t, a;
            return (
              (t = e().startOf('week')),
              (a = this.unix() - t.unix() >= 604800 ? '[   ]' : '[   ]'),
              0 === this.minutes() ? a + 'dddAh      ' : a + 'dddAh   mm'
            );
          },
          lastWeek: function () {
            var t, a;
            return (
              (t = e().startOf('week')),
              (a = this.unix() < t.unix() ? '[   ]' : '[   ]'),
              0 === this.minutes() ? a + 'dddAh      ' : a + 'dddAh   mm'
            );
          },
          sameElse: 'LL',
        },
        ordinalParse: /\d{1,2}(   |   |   )/,
        ordinal: function (e, t) {
          switch (t) {
            case 'd':
            case 'D':
            case 'DDD':
              return e + '   ';
            case 'M':
              return e + '   ';
            case 'w':
            case 'W':
              return e + '   ';
            default:
              return e;
          }
        },
        relativeTime: {
          future: '%s   ',
          past: '%s   ',
          s: '      ',
          m: '1      ',
          mm: '%d      ',
          h: '1      ',
          hh: '%d      ',
          d: '1   ',
          dd: '%d   ',
          M: '1      ',
          MM: '%d      ',
          y: '1   ',
          yy: '%d   ',
        },
        week: { dow: 1, doy: 4 },
      });
    }),
    (function (e) {
      e(Tt);
    })(function (e) {
      return e.defineLocale('zh-tw', {
        months:
          '      _      _      _      _      _      _      _      _      _      _         _         '.split(
            '_'
          ),
        monthsShort:
          '1   _2   _3   _4   _5   _6   _7   _8   _9   _10   _11   _12   '.split(
            '_'
          ),
        weekdays:
          '         _         _         _         _         _         _         '.split(
            '_'
          ),
        weekdaysShort: '      _      _      _      _      _      _      '.split(
          '_'
        ),
        weekdaysMin: '   _   _   _   _   _   _   '.split('_'),
        longDateFormat: {
          LT: 'Ah   mm',
          LTS: 'Ah   m   s   ',
          L: 'YYYY   MMMD   ',
          LL: 'YYYY   MMMD   ',
          LLL: 'YYYY   MMMD   LT',
          LLLL: 'YYYY   MMMD   ddddLT',
          l: 'YYYY   MMMD   ',
          ll: 'YYYY   MMMD   ',
          lll: 'YYYY   MMMD   LT',
          llll: 'YYYY   MMMD   ddddLT',
        },
        meridiemParse: /      |      |      |      |      /,
        meridiemHour: function (e, t) {
          return (
            12 === e && (e = 0),
            '      ' === t || '      ' === t
              ? e
              : '      ' === t
                ? e >= 11
                  ? e
                  : e + 12
                : '      ' === t || '      ' === t
                  ? e + 12
                  : void 0
          );
        },
        meridiem: function (e, t) {
          var a = 100 * e + t;
          return 900 > a
            ? '      '
            : 1130 > a
              ? '      '
              : 1230 > a
                ? '      '
                : 1800 > a
                  ? '      '
                  : '      ';
        },
        calendar: {
          sameDay: '[      ]LT',
          nextDay: '[      ]LT',
          nextWeek: '[   ]ddddLT',
          lastDay: '[      ]LT',
          lastWeek: '[   ]ddddLT',
          sameElse: 'L',
        },
        ordinalParse: /\d{1,2}(   |   |   )/,
        ordinal: function (e, t) {
          switch (t) {
            case 'd':
            case 'D':
            case 'DDD':
              return e + '   ';
            case 'M':
              return e + '   ';
            case 'w':
            case 'W':
              return e + '   ';
            default:
              return e;
          }
        },
        relativeTime: {
          future: '%s   ',
          past: '%s   ',
          s: '      ',
          m: '         ',
          mm: '%d      ',
          h: '         ',
          hh: '%d      ',
          d: '      ',
          dd: '%d   ',
          M: '         ',
          MM: '%d      ',
          y: '      ',
          yy: '%d   ',
        },
      });
    }),
    Tt.locale('en'),
    At
      ? (module.exports = Tt)
      : 'function' == typeof define && define.amd
        ? (define(function (e, t, a) {
            return (
              a.config &&
                a.config() &&
                a.config().noGlobal === !0 &&
                (wt.moment = Dt),
              Tt
            );
          }),
          pt(!0))
        : pt();
}).call(this);
